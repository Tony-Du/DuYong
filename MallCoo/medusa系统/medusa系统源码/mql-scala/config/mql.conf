mql {
  segmentation:
    """
{{{ _all_measures <- {{ #root.measures_groups#.map(#measures#.map(#alias#)).flatten() }} }}}
{{{ _period_alias <- {{ #period#.map('period') }} }}}

{{{ _dimension_array <- {{ #self#.union(#dimensions.event#,#dimensions.user#).map(`#alias#`) }} }}}

{{{ _dimension_list <- {{ #self#.@_dimension_array().join(',') }} }}}

{{{ _dim_filter <- {{ #self#.@_dimension_array().map(`#self# IS NOT NULL`) }} }}}

{{{ _partition <-
  {{
    #root#.union(#root.dimensions.user#,#root.dimensions.event#).map {
          #event_type# -> e,
          #alias# -> a
        => match {
            #e# is 'empty' => #a#,
            _ => ''
        }
    }.join(',').prefix('PARTITION BY ').suffix(',type')
  }}
}}}

{{{ _z <-
  SELECT
    {{
      #expressions2#.map {
          #raw# -> e,
          match {
            #self# has 'period' => #e#,
            _ => `max(#e#)`
          } -> exp,
          @_all_measures -> am
        =>
          match {
            #self# has 'format' & #format# = 'int' => `COALESCE(cast(#exp# as decimal(38,0)),0) #alias#`,
            #self# has 'format' & #format# = 'double' => `COALESCE(cast(#exp# as decimal(38,2)),0) #alias#`,
            #self# has 'format' & #format# = 'percent' => `COALESCE(cast(#exp# * 100 as decimal(38,2)),0) #alias#`,
            #am# has #exp# => `COALESCE(max(#exp#),0) #alias#`,
            _ => `COALESCE(#exp#,0) #alias#`
          }
      }
    }}
    {{ #self#.@_dimension_list().prefix(',') }}
}}}

{{{ _y <-
  SELECT
    {{
      #measures_groups#.map(#measures#.map(#self#)).flatten.map {
          #self# -> m,
          @_partition -> partition
        => match {
            #m.group# = 'true' => `#m.alias#_max #m.alias#`,
            _ => `FIRST_VALUE(#m.alias#_max) OVER(#partition# ORDER BY #m.alias#_max DESC NULLS LAST) #m.alias#`
          }
      }
    }}
    {{ #self#.@_dimension_list().prefix(',') }}
    {{ #self#.@_period_alias().prefix(',') }}
}}}

{{{ _a <-
  SELECT
    max(type) type,
    {{
      #self#.map {
          #measures#.map(#alias#) -> m,
          @_all_measures -> a
        => #a#.map {
          match {
            #m# has #self# => `max(#self#) #self#_max`,
            _ => `NULL #self#_max`
          }
        }
      }
    }}
    {{ #self#.@_dimension_list().prefix(',') }}
    {{
     match {
      #self# has 'period' => ',period',
      _ => ',NULL period'
     }
    }}
}}}

{{{ _b <-
  SELECT straight_join {{ #self#.union(@event_type_measure_step2_with_alias,@_dimension_list,@_period_alias).join(',') }},{{ `#index# type` }}
  FROM (
    SELECT
      distinct_id
      {{ @user_measure }}
      {{ #self#.@user_dimension_with_alias().prefix(',') }}
    FROM {{ #root#.@user() }}
    WHERE {{ @id_range }} {{ #self#.@user_filter().prefix('AND ') }}
  ) u JOIN /* +BROADCAST */ (
    SELECT
      distinct_id,
      event_type
      {{ @event_measure }}
      {{ #self#.@event_dimension_with_alias().prefix(',') }}
      {{ #self#.@period().prefix(',') }}
      {{
        #measures#.map {
          match {
            #measure# = 'distinct' => `#field# #field#_#measure#`
          }
        }.join(',',',','')
      }}
    FROM {{ #root#.@event() }}
    WHERE {{ @time_range }} AND {{ @project_filter }} AND {{ @event_filter }}
    GROUP BY
      event_type,distinct_id
      {{ #dimensions.event#.map(`#alias#`).join(',',',','') }}
      {{ #self#.@_period_alias().prefix(',') }}
      {{ #measures#.map { match { #measure# = 'distinct' => `#field#_#measure#` } }.join(',',',','') }}
  ) e ON u.distinct_id=e.distinct_id
  GROUP BY event_type {{ #self#.@_dimension_list().prefix(',') }} {{ #self#.@_period_alias().prefix(',') }}
}}}

{{{ _user_unit <-
  {{ @_a }}
  FROM (
    {{ @_b }}
  ) a
  {{
    #self#.match {
      #self# has 'period' => #self#.union(@_dimension_array,#period#.map('period')),
      _ => @_dimension_array
    }.join('GROUP BY ',',','')
  }}
}}}

{{{ _sa <-
  (
    SELECT
      {{ `#index# type,` }}
      event_type,
      mallcoo_id
      {{ #self#.@event_type_measure_with_alias().prefix(',') }}
      {{ #self#.@dimension_with_alias().prefix(',') }}
      {{ #self#.@period().prefix(',') }}
    FROM {{ #root#.@table() }}
    WHERE {{ @time_range }} AND {{ @project }} AND {{ @filter }}
    GROUP BY event_type,mallcoo_id {{ #self#.@_dimension_list().prefix(',') }} {{ #self#.@_period_alias().prefix(',') }}
  ) a
  GROUP BY mallcoo_id
}}}

{{{ _sa_distinct <-
  (
    SELECT
      {{ `#index# type,` }}
      event_type
      {{ #self#.@event_type_measure_with_alias().prefix(',') }}
      {{ #self#.@dimension_with_alias().prefix(',') }}
      {{ #self#.@period().prefix(',') }}
    FROM {{ #root#.@table() }}
    WHERE {{ @time_range }} AND {{ @project }} AND {{ @filter }}
    GROUP BY event_type {{ #self#.@_dimension_list().prefix(',') }} {{ #self#.@_period_alias().prefix(',') }}
  ) a
  GROUP BY '1'
}}}

{{{ _shop_unit <-
  SELECT
    max(type) type,
    {{
      #self#.map {
          #measures#.map(#alias#) -> m,
          @_all_measures -> a
        => #a#.map {
          match {
            #m# has #self# => `max(#self#) #self#_max`,
            _ => `NULL #self#_max`
          }
        }
      }
    }}
    {{ #self#.@_dimension_list().prefix(',') }}
    {{
     match {
      #self# has 'period' => ',period',
      _ => ',NULL period'
     }
    }}
  FROM
    {{
      match {
        #measures.0.measure# = 'distinct' => @_sa_distinct,
        _ => @_sa
      }
    }}
  {{
    #self#.match {
      #self# has 'period' => #self#.union(@_dimension_array,#period#.map('period')),
      _ => @_dimension_array
    }.join(',',',','')
  }}
}}}

{{{ _user <-
  {{
    #measures_groups#.index('1').map {
       #value# -> v,
       #index# -> i,
       #v#.add('index',#i#) -> x => #x#.@_user_unit()
    }.join(' UNION ALL ')
  }}
}}}

{{{ _shop <-
  {{
    #measures_groups#.index('1').map {
       #value# -> v,
       #index# -> i,
       #v#.add('index',#i#) -> x => #x#.@_shop_unit()
    }.join(' UNION ALL ')
  }}
}}}

{{{ _sz <-
  SELECT
    {{
      #expressions2#.map {
          #expression# -> exp,
          @_all_measures -> am
        =>
          match {
            #self# has 'format' & #format# = 'int' => `COALESCE(cast(#exp# as decimal(38,0)),0) #alias#`,
            #self# has 'format' & #format# = 'double' => `COALESCE(cast(#exp# as decimal(38,2)),0) #alias#`,
            #self# has 'format' & #format# = 'percent' => `COALESCE(cast(#exp# * 100 as decimal(38,2)),0) #alias#`,
            _ => `COALESCE(#exp#,0) #alias#`
          }
      }
    }}
    {{ #self#.@_dimension_list().prefix(',') }}
}}}

{{{ _x <-
  SELECT
    {{
      #measures_groups#.map(#measures#.map(#self#)).flatten.map{
        match {
          #measure# = 'average' => `avg(#alias#) #alias#`,
          _ => `sum(#alias#) #alias#`
        }
      }
    }}
    {{ #expressions2#.map(#children#).flatten.join(',').prefix(',') }}
    {{ #self#.@_dimension_list().prefix(',') }}
    {{ #self#.@_period_alias().prefix(',') }}
}}}

{{{ _user_template <-
  {{ @_sz }}
  FROM (
    {{ @_x }}
    FROM (
      {{ @_y }}
      FROM (
        {{ @_user }}
      ) y
    ) x
    {{ #self#.union(@_dim_filter,@expressions_limit2).join('WHERE ',' AND ','') }}
    {{ #self#.@_dimension_array().join('GROUP BY ',',','') }}
  ) z
}}}

{{{ _shop_template <-
  {{ @_sz }}
  FROM (
    {{ @_x }}
    FROM (
      {{ @_y }}
      FROM (
        {{ @_shop }}
      ) y
    ) x
    {{ #self#.union(@_dim_filter,@expressions_limit2).join('WHERE ',' AND ','') }}
    {{ #self#.@_dimension_array().join('GROUP BY ',',','') }}
  ) z
}}}

{{
  match {
    #category# = 'user' => @_user_template,
    #category# = 'shop' => @_shop_template,
  }
}}
{{ @pages }};
    """
  scatter:
    """
{{{ _exp <-
{{
  match {
    #self# has 'expressions2' =>
      #expressions2#.map {
         #raw# -> exp =>
          match {
            #self# has 'format' & #format# = 'int' => `COALESCE(cast(#exp# as decimal(38,0)),0)`,
            #self# has 'format' & #format# = 'double' => `COALESCE(cast(#exp# as decimal(38,2)),0)`,
            #self# has 'format' & #format# = 'percent' => `COALESCE(cast(#exp# * 100 as decimal(38,2)),0)`,
            _ => `COALESCE(#exp#,0)`
          }
      },
    _ => #measures#.map {
      match {
        #self# has 'alias' => #alias#,
        _ => #measure#
      }
    }.join('')
  }
}}
}}}
SELECT
  dimension,
  total,
  measure,
  person_number,
  cast(person_number/total as decimal(38, 4)) rate
FROM (
  SELECT
    dimension,
    measure,
    {{
      #measure_type# match {
        'accumulation' =>
          'SUM(pn) OVER(PARTITION BY dimension ORDER BY cast(measure as DOUBLE) DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) person_number',
        _ => 'pn person_number'
       }
    }},
    sum(pn) OVER (PARTITION BY dimension) total
  FROM (
    SELECT
      dimension,COUNT(*) pn,
      {{
        #self#.match {
          #self# has 'expressions2' => #expressions2.0#,
          _ => #measures.0#
        }.map {
          match {
            #self# has 'range' => #range#.map {
                #alias#.match{ #self# is 'string' => `'#self#'`, _ => `#self#` } -> alias,
                'measure_per_unit' -> mu,
                #filter#.where('measure_per_unit') -> filter
               => `WHEN #filter# THEN #alias#`
            }.join('CASE ',' ',' END measure'),
            _ => `cast(measure_per_unit AS STRING) measure`
          }
        }.join(',')
      }}
    FROM (
      SELECT mallcoo_id,dimension,round({{@_exp}}/{{ #unit_measure# }}) measure_per_unit
      FROM (
        SELECT mallcoo_id,{{ @dimension }} {{ @group_measure }} {{ #self#.@period().prefix(',') }}
        FROM {{ @table }}
        WHERE {{ @project }} AND {{ @time_range }} AND {{ @filter }}
        GROUP BY mallcoo_id,dimension {{ #period#.map('period').prefix(',') }}
        {{ #self#.@expressions_limit2().prefix('HAVING ') }}
      ) m
      {{
        #period#.map('GROUP BY mallcoo_id,dimension')
      }}
    )n
    GROUP BY dimension,measure
  ) v
) z
WHERE measure<>'0';
  """
  retention:
    """
{{{ _retention_range <-
{{
  #root.time_range#.map {
      #self# -> tr,
      #root.unit_days# match {
        'day' => 'days_add',
        'week' => 'weeks_add',
        'month' => 'months_add'
      } -> func,
      #root.duration# -> duration
    => `(day BETWEEN '#tr.0#' AND #func#('#tr.1#',#duration#))`
  }.join(' AND ')
}}
}}}

{{{ _time_dimension <-
{{
  #unit_days# match {
    'day' => 'day',
    'week' => 'to_date(date_sub(day,dayofweek(date_sub(day,1))-1))',
    'month' => 'getmonth(day)'
  }
}}
}}}

{{{ _dimension_group_max <-
{{
  match {
    #dimensions.event#.map(#field#) has 'time' => @_time_dimension(),
    _ => #self#.union(#dimensions.event#,#dimensions.user#).map { @__dimension -> dim => `COALESCE(max(IF(#dim# IS NULL OR trim(cast(#dim# AS STRING))='',NULL,cast(#dim# AS STRING))), '未知')`}.join(',')
  }
}}
}}}

{{{ _dimension_max <-
{{
  match {
    #dimensions.event#.map(#field#) has 'time' => '',
    _ => #self#.union(#dimensions.event#,#dimensions.user#).map { @__dimension -> dim => `MAX(#field#) _dim`}.join(',',',','')
  }
}}
}}}

{{{ _dimension_window_max <-
{{
  match {
    #dimensions.event#.map(#field#) has 'time' => '',
    _ => `,COALESCE(MAX(IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING))) OVER(PARTITION BY mallcoo_id),'未知') dimension`
  }
}}
}}}

{{{ _dimension_type <-
{{
  match {
    #dimensions.event#.map(#field#) has 'time' => 'time',
    _ => 'dimension'
  }
}}
}}}

{{{ _event_dimension <-
{{
  #dimension_type# match {
    'first_event' => 'first_event',
    'second_event' => 'second_event',
    _ => 'first_event'
  }
}}
}}}

SELECT
    total.dimension,
    COALESCE(retention.duration,0) duration,
    COALESCE(total.person_number,0) total,
    COALESCE(retention.person_number,0) person_number,
    COALESCE(cast(retention.person_number/total.person_number as decimal(38,4)),0.0) rate
FROM (
    SELECT t.dimension,count(t.mallcoo_id) person_number
    FROM (
        SELECT
          mallcoo_id,
          sum(if( {{ @time_range }} AND {{ #first_event_filter#.where() }}, 1, 0)) type
          {{ #self#.@_dimension_group_max().prefix(',') }} dimension
        FROM {{ @table }}
        WHERE {{ @project }} AND {{ @_retention_range }} AND ({{ #first_event_filter#.where() }} OR {{ #second_event_filter#.where() }}) {{ #user_filter#.where().prefix('AND') }}
        GROUP BY mallcoo_id
        {{
          match {
            #dimensions.event#.map(#field#) has 'time' => #self#.@_time_dimension().prefix(','),
            _ => ''
          }
        }}
        HAVING type>0
    ) t
    GROUP BY t.dimension
) total LEFT JOIN (
    SELECT
        {{
          #unit_days# match {
            'day' => 'datediff(second_event.time,first_event.time)',
            'week' => 'ceil(datediff(second_event.time,first_event.time)/7)',
            'month' => 'ceil(months_between(second_event.time,first_event.time))'
          }
        }} duration,
        {{ @_event_dimension }}.{{ @_dimension_type }} dimension,
        count(DISTINCT first_event.mallcoo_id) person_number
    FROM (
        SELECT time,mallcoo_id {{ @_dimension_window_max }}
        FROM (
          SELECT {{ @_time_dimension }} time,mallcoo_id {{ @_dimension_max }}
          FROM {{ @table }}
          WHERE {{ @project }} AND {{ @time_range }} AND {{ #first_event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
          GROUP BY mallcoo_id,time
        ) x
    ) first_event JOIN (
        SELECT time,mallcoo_id {{ @_dimension_window_max }}
        FROM (
          SELECT {{ @_time_dimension }} time,mallcoo_id {{ @_dimension_max }}
          FROM {{ @table }}
          WHERE {{ @project }} AND {{ @_retention_range }} AND {{ #second_event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
          GROUP BY mallcoo_id,time
        ) x
    ) second_event ON first_event.mallcoo_id=second_event.mallcoo_id
    WHERE first_event.time<=second_event.time
    GROUP BY duration,{{ @_event_dimension }}.{{ @_dimension_type }}
    HAVING duration<{{ #duration# }}
) retention ON total.dimension=retention.dimension;
    """
  association:
    """
SELECT
    Itemset,
    COALESCE(cast(SupportCount/total as decimal(38,4)),0) Support,
    COALESCE(cast(SupportCount/SupportCountB as decimal(38,4)),0) ReverseConfidence,
    COALESCE(cast(SupportCount/num as decimal(38,4)),0) Confidence,
    COALESCE(SupportCount,0) SupportCount,
    COALESCE(cast((SupportCount/num)/(SupportCountB/total) as decimal(38,4)),0) Lift
FROM (
    SELECT count(mallcoo_id) total,sum(item_sc) num
    FROM (
        SELECT mallcoo_id,max(if({{ #item.rule#.where(`IF(#item.field# IS NULL OR trim(cast(#item.field# AS STRING))='', '未知',cast(#item.field# AS STRING))` }},1,0)) item_sc
        FROM {{ @table }}
        WHERE {{ @project }} AND {{ @time_range }} AND {{ @filter }}
        GROUP BY mallcoo_id
    ) t
) a CROSS JOIN (
    SELECT Itemset,sum(num) SupportCountB,sum(hadBeen_count) SupportCount
    FROM (
        SELECT Itemset,COUNT(DISTINCT mallcoo_id) num,if(hadBeen=1,COUNT(DISTINCT mallcoo_id),null) hadBeen_count
        FROM (
            SELECT
                mallcoo_id,
                max(if({{ #item.rule#.where(`IF(#item.field# IS NULL OR trim(cast(#item.field# AS STRING))='', '未知',cast(#item.field# AS STRING))`) }},1,0)) OVER(PARTITION BY mallcoo_id) hadBeen,
                {{ `IF(#item.field# IS NULL OR trim(cast(#item.field# AS STRING))='', '未知',cast(#item.field# AS STRING))` }} Itemset
            FROM {{ @table }}
            WHERE {{ @project }} AND {{ @time_range }} AND {{ @filter }}
        ) x
        GROUP BY Itemset,hadBeen
    ) b
    GROUP BY Itemset
) c
{{ #item.filter.event#.where('Itemset').prefix('WHERE') }};
    """
  funnel:
    """
SELECT step,count(DISTINCT mallcoo_id) step_count{{ #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map('dimension').join(',',',','') }}
FROM (
    SELECT
        mallcoo_id,
        cast(udf.funnel(action,ts,{{ #steps#.index('1').map(#index#).join('"',',','"') }},{{ #window_length# }}) AS INT) step
        {{
           #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map(#event_type#).match {
               #self#.size = '1' => `event_type=#self.0#`,
               _ => #root.steps.0#.where()
           }.map(`COALESCE(max(IF(#self#,IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING)),NULL)),'未知') dimension`).join(',','','')
        }}
    FROM (
        SELECT
           mallcoo_id,ts,event_type,
           {{
             #steps#.index('1').map {
                 #index# -> index,
                 #value#.where() -> filter
               => `WHEN #filter# THEN #index#`
             }.join('CASE ',' ',' END')
           }} action
           {{ #self#.@dimensions_without_alias().prefix(',').suffix(' _dim') }}
        FROM {{ @table }}
        WHERE {{ @project }} AND {{ @time_range }} AND ({{ #steps#.map(#self#.where()).join('OR') }}) {{ #filter.all#.where().prefix('AND') }}
    ) f
    WHERE action>0
    GROUP BY mallcoo_id
) s
WHERE step>0
GROUP BY step{{ #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map('dimension').join(',',',','') }};
    """
  user_analytics:
    """
{{{ _order <-
{{
  match {
    #self# has 'order' & #self# has 'direction' => `ORDER BY #order# #direction#`,
    #self# has 'order' => `ORDER BY #order#`,
    _ => ''
  }
}}
}}}
{{{ _limit <-
{{
  match {
    #self# has 'size' => `LIMIT #size#`,
    _ => ''
  }
}}
}}}
{{{ _offset <-
{{
  match {
    #self# has 'start' => `OFFSET #start#`,
    _ => ''
  }
}}
}}}

SELECT
  {{
    #expressions2#.map {
       #raw# -> exp =>
        match {
          #self# has 'format' & #format# = 'int' => `COALESCE(cast(#exp# as decimal(38,0)),0) #alias#`,
          #self# has 'format' & #format# = 'double' => `COALESCE(cast(#exp# as decimal(38,2)),0) #alias#`,
          #self# has 'format' & #format# = 'percent' => `COALESCE(cast(#exp# * 100 as decimal(38,2)),0) #alias#`,
          _ => `COALESCE(#exp#,0) #alias#`
        }
    }
  }}
  {{ #self#.@dimension_alias_dim_list().prefix(',') }}
FROM (
  SELECT
    {{ @measure_with_alias }}
    {{ #self#.@user_dimension_with_alias().prefix(',') }}
  FROM {{ @user }}
  WHERE {{ @id_range }} AND distinct_id=mallcoo_id {{ #self#.@user_filter().prefix('AND ') }}
  {{ #self#.@dimension_alias_dim_list().prefix('GROUP BY ') }}
) x
{{
  match {
    #measures.0.alias# = #expressions2.0.expression# => '',
    _ => #self#.@dimension_alias_dim_list().prefix('GROUP BY ')
  }
}}
{{ @pages }}
;
    """
  user_list:
    """
{{{ _dimension_filter <-
{{
  #self#.@all_dimension().map {
      #filter# -> filter,
      @dimension_without_alias -> dimension_string,
      @__dimension -> dimension,
      #self# -> dim
    => match {
       #filter.query.head.0.values.0# is 'number' => #filter#.where(#dimension#),
       _ => #filter#.where(#dimension_string#)
    }
  }.join(' AND ',' AND ','')
}}
}}}

{{{ segmentation <-
SELECT DISTINCT mallcoo_id
FROM {{ @table }}
WHERE {{ @project }} AND {{ @time_range }} AND {{ @filter }} {{ @_dimension_filter }}
}}}

{{{ association <-
SELECT mallcoo_id
FROM {{ @table }}
WHERE {{ @project }} AND {{ @time_range }} AND {{ @filter }}
GROUP BY mallcoo_id
HAVING max(if({{ #item.rule#.where(`IF(#item.field# IS NULL OR trim(cast(#item.field# AS STRING))='', NULL,cast(#item.field# AS STRING))`) }},1,0))=1 AND max(if({{ #item.filter.event#.where(`IF(#item.field# IS NULL OR trim(cast(#item.field# AS STRING))='', '未知',cast(#item.field# AS STRING))` }},1,0))=1
}}}

{{{ _scatter_expression_alias <-
{{
  #root#.match {
    #self# has 'expressions2' => #expressions2.0.alias#,
    _ => #measures.0.alias#
  }
}}
}}}

{{{ scatter <-
SELECT
  mallcoo_id,
  {{
    #root#.match {
      #self# has 'expressions2' =>
        #expressions2#.map {
          #raw# -> exp =>
            #self#.match {
              #self# has 'format' & #format# = 'int' => `round(COALESCE(cast(#exp# as decimal(38,0)),0)/#root.unit_measure#) #alias#`,
              #self# has 'format' & #format# = 'double' => `round(COALESCE(cast(#exp# as decimal(38,2)),0)/#root.unit_measure#) #alias#`,
              #self# has 'format' & #format# = 'percent' => `round(COALESCE(cast(#exp# * 100 as decimal(38,2)),0)/#root.unit_measure#) #alias#`,
              _ => `round(COALESCE(#exp#,0)/#root.unit_measure#) #alias#`
            }
        }.join(''),
      _ => `round(#measures.0.alias#/#root.unit_measure#) #measures.0.alias#`
    }
  }}
FROM (
  SELECT mallcoo_id {{@group_measure}} {{ #self#.@period().prefix(',') }}
  FROM {{ @table }}
  WHERE {{ @project }} AND {{ @time_range }} AND {{ @filter }} {{ @_dimension_filter }}
  GROUP BY mallcoo_id {{ #period#.map('period').prefix(',') }}
  {{ #self#.@expressions_limit2().prefix('HAVING ') }}
) x
{{ #period#.map('GROUP BY mallcoo_id') }}
{{
  #self#.match {
    #self# has 'expressions2' => #expressions2.0.filter#,
    _ => #measures.0.filter#
  }.where(@_scatter_expression_alias).prefix('HAVING ')
}}
}}}

{{{ user_analytics <-
SELECT mallcoo_id
FROM {{ @user }}
WHERE {{ @id_range }} AND distinct_id=mallcoo_id {{ #self#.@user_filter().prefix('AND ') }} {{ @_dimension_filter }}
}}}

{{{ query_from_tag <-
SELECT mallcoo_id
FROM {{ @user }}
WHERE {{ @id_range }} AND distinct_id=mallcoo_id AND udf.has(_tag,{{ `'#tag_value#'` }}) IS NOT NULL
}}}

{{{ _update <-
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,{{ `'#uniqueid#'` }})
FROM
  {{ #category# match { 'user' => 'medusa', 'shop' => 'medusa_shop' } }}.kudu_user x,
  ({{
    match {
      #self# has 'tag_value' => @query_from_tag,
      #model# = 'scatter' => @scatter,
      #model# = 'user_analytics' => @user_analytics,
      #model# = 'association' => @association,
      #model# = 'retention' => @retention_list,
      #model# = 'funnel' => @funnel_list,
      #model# = 'segmentation' => @segmentation,
      #model# = 'segment' => @segment_list
    }
  }})y
  WHERE x.mallcoo_id=y.mallcoo_id;
}}}

{{{ _export <-
SELECT mallcoo_id,idlist,{{ @user_info }}
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND mallcoo_id=distinct_id
{{
  match {
    #self# has 'pages' => @pages,
    #model# = 'export' => @pages,
    _ => 'LIMIT 1000'
  }
}};
}}}

{{{ _count <-
SELECT count(*)
FROM {{ @user }}
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND mallcoo_id=distinct_id;
}}}

{{
  match {
    #model# = 'export' => @_export,
    #model# = 'count' => @_count,
    _ => @_update
  }
}}

    """
  user_list_properties:
    """
{{{ _user <-
SELECT
  CASE
    WHEN year(now())-year(_birthday) <=18 THEN '18岁以下'
    WHEN year(now())-year(_birthday) BETWEEN 19 AND 25 THEN '19~25岁'
    WHEN year(now())-year(_birthday) BETWEEN 26 AND 30 THEN '26~30岁'
    WHEN year(now())-year(_birthday) BETWEEN 31 AND 35 THEN '31~35岁'
    WHEN year(now())-year(_birthday) BETWEEN 36 AND 40 THEN '36~40岁'
    WHEN year(now())-year(_birthday) BETWEEN 41 AND 45 THEN '41~45岁'
    WHEN year(now())-year(_birthday) BETWEEN 46 AND 50 THEN '46~50岁'
    WHEN year(now())-year(_birthday) BETWEEN 51 AND 60 THEN '51~60岁'
    WHEN year(now())-year(_birthday) > 60  THEN '60岁以上' ELSE '未知'
  END property,
  count(DISTINCT mallcoo_id) COUNT,
  1 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT IF(_gender IS NULL OR trim(_gender)='', '未知',_gender) property, count(DISTINCT mallcoo_id) COUNT,2 TYPE
FROM medusa.kudu_user WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT IF(_register_source IS NULL OR trim(_register_source)='', '未知',_register_source) property, count(DISTINCT mallcoo_id) COUNT,3 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT if(_hascar,'有车','无车') property, count(DISTINCT mallcoo_id) COUNT,4 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT IF(_membercard IS NULL OR trim(_membercard)='', '未知',_membercard) property, count(DISTINCT mallcoo_id) COUNT,5 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT
  CASE
    WHEN datediff(now(),_register_time) <30 THEN '30天内'
    WHEN datediff(now(),_register_time) BETWEEN 30 AND 59 THEN '30-60天内'
    WHEN datediff(now(),_register_time) BETWEEN 60 AND 89 THEN '60-90天内'
    WHEN datediff(now(),_register_time) BETWEEN 90 AND 179 THEN '90-180天内'
    WHEN datediff(now(),_register_time) BETWEEN 180 AND 359 THEN '180-360天内'
    WHEN datediff(now(),_register_time)>=360 THEN '360天以上'
    ELSE '未知'
  END property,
  count(DISTINCT mallcoo_id) COUNT,
  6 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT '微信渠道' property,count(DISTINCT mallcoo_id) COUNT,7 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND _openid IS NOT NULL
UNION ALL
SELECT '短信渠道' property, count(DISTINCT mallcoo_id) COUNT,7 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND _mobile IS NOT NULL
UNION ALL
SELECT 'APP渠道' property, count(DISTINCT mallcoo_id) COUNT,7 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND _register_source IN ('iOS','ANDroid')
UNION ALL
SELECT '未知渠道' property, count(DISTINCT mallcoo_id) COUNT,7 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND _register_source NOT IN ('iOS','ANDroid') AND _mobile IS NULL AND _openid IS NULL
UNION ALL
SELECT
  CASE
    WHEN datediff(now(),_loc_first_time) <30 THEN '30天内'
    WHEN datediff(now(),_loc_first_time) BETWEEN 30 AND 59 THEN '30-60天内'
    WHEN datediff(now(),_loc_first_time) BETWEEN 60 AND 89 THEN '60-90天内'
    WHEN datediff(now(),_loc_first_time) BETWEEN 90 AND 179 THEN '90-180天内'
    WHEN datediff(now(),_loc_first_time) BETWEEN 180 AND 359 THEN '180-360天内'
    WHEN datediff(now(),_loc_first_time)>=360 THEN '360天以上'
    ELSE '未知'
  END property,
  count(DISTINCT mallcoo_id) COUNT,
  8 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property
UNION ALL
SELECT IF(_mobile_brand IS NULL OR trim(_mobile_brand)='', '未知',_mobile_brand) property, count(DISTINCT mallcoo_id) COUNT,9 TYPE
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property;
}}}

{{{ _source_location <-
SELECT {{ #self# match { 'office' => '_workplace', 'residence' => '_residence' } }} property,count(DISTINCT mallcoo_id) count,10 type
FROM medusa.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND {{ #self# match { 'office' => '_workplace', 'residence' => '_residence' } }} IS NOT NULL
GROUP BY property
}}}

{{{ _source <-
SELECT property,count,type
FROM (
{{
  #location# match {
    'all' => #self#.union('office','residence'),
    _ => #self#
  }.map(@_source_location).join('UNION ALL ')
}}
) z
ORDER BY count desc;
}}}

{{{ _source_count_location <-
SELECT count(DISTINCT mallcoo_id) cnt
FROM medusa.kudu_user
WHERE {{ @id_range }}
    AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
    AND {{ #property# }} IS NOT NULL
    {{
      match {
        #root# has 'lefttop' & #root# has 'rightbottom' =>
          `AND cast(split_part(#property#, '_',1) as DOUBLE) BETWEEN #root.lefttop.0# AND #root.rightbottom.0# AND cast(split_part(#property#, '_',2) as DOUBLE) BETWEEN #root.rightbottom.1# AND #root.lefttop.1#`
      }
    }}
}}}

{{{ _source_count <-
SELECT sum(cnt) count
FROM (
{{
  #location# match {
    'all' => #self#.union('office','residence'),
    _ => #self#
  }.map { #self# match { 'office' => '_workplace', 'residence' => '_residence' } -> property => @_source_count_location }.join(' UNION ALL ')
}}
) z;
}}}

{{{ _radiation <-
SELECT
  ceil(getdistance(cast(split_part(_workplace,'_',1) as DOUBLE),cast(split_part(_workplace,'_',2) as DOUBLE),{{ #mall_lat# }},{{ #mall_lng# }})) property,
  count(DISTINCT mallcoo_id) count
FROM medusa.kudu_user
WHERE {{ @id_range }} AND _workplace IS NOT NULL AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL
GROUP BY property;
}}}
{{
  match {
    #type# = 'user' => @_user,
    #type# = 'source' => @_source,
    #type# = 'radiation' => @_radiation,
    #type# = 'sourcecount' => @_source_count
  }
}}

    """
  user_detail:
    """
{{{ _info <-
SELECT {{ @user_detail_info }}
FROM {{ #category# match { 'user' => 'medusa.kudu_user', 'shop' => 'medusa_shop.kudu_current_user' } }}
WHERE id={{ `'#projectid#-#mallcoo_id#'` }} AND mallcoo_id=distinct_id;
}}}
{{{ _summary <-
SELECT day,event_type,count(*) count
FROM {{ #category# match { 'user' => 'medusa.event2', 'shop' => 'medusa_shop.event2' } }}
WHERE event_type<>10001 AND {{ @time_range }} AND {{ @project_filter }} AND distinct_id IN ({{ #id_list#.map(`'#self#'`).join(',') }})
GROUP BY event_type,day;
}}}
{{{ _detail <-
SELECT * FROM {{ #category# match { 'user' => 'medusa.event2', 'shop' => 'medusa_shop.event2' } }}
WHERE event_type<>10001 AND {{ @time_range }} AND {{ @project_filter }} AND distinct_id IN ({{ #id_list#.map(`'#self#'`).join(',') }}) ORDER BY time;
}}}
{{
  match {
    #type# = 'info' => @_info,
    #type# = 'summary' => @_summary,
    #type# = 'detail' => @_detail
  }
}}
    """
  tag_mark:
    """
{{{ _user_list <-
SELECT mallcoo_id
FROM {{ #category# match { 'user' => 'medusa', 'shop' => 'medusa_shop' } }}.kudu_user
WHERE {{ @id_range }} AND udf.has(_tag_temp,{{ `'#uniqueid#'` }}) IS NOT NULL AND mallcoo_id=distinct_id
}}}

{{{ _update <-
UPDATE IGNORE x SET x._tag=udf.put(x._tag,{{ `'#tag_value#'` }})
FROM {{ #category# match { 'user' => 'medusa', 'shop' => 'medusa_shop' } }}.kudu_user x,(
{{
  match {
    #type# = 'user_list' => @_user_list,
    #type# = 'segment' => @segment_list
  }
}})y
WHERE x.mallcoo_id=y.mallcoo_id AND {{ @id_range }};
}}}

{{{ _count <-
SELECT count(*) count
FROM {{ #category# match { 'user' => 'medusa.kudu_user', 'shop' => 'medusa_shop.kudu_current_user' } }}
WHERE {{ @id_range }} AND udf.has(_tag,{{ `'#tag_value#'` }}) IS NOT NULL AND distinct_id=mallcoo_id;
}}}

{{{ _remove <-
UPDATE IGNORE {{ #category# match { 'user' => 'medusa', 'shop' => 'medusa_shop' } }}.kudu_user
SET _tag=udf.remove(_tag,{{ `'#tag_value#'` }})
WHERE udf.has(_tag,{{ `'#tag_value#'` }}) IS NOT NULL AND {{ @id_range }};
}}}

{{
  match {
    #type# = 'count' => @_count,
    #type# = 'remove' => @_remove,
    _ => @_update
  }
}}
    """
  autocomplete:
    """
SELECT DISTINCT property
FROM (
{{
  #properties#.map {
      #category# match { 'user' => 'medusa', 'shop' => 'medusa_shop' } -> _category,
      `id BETWEEN '#projectid#-#field#' AND '#projectid#-#field#.'` -> _field,
      `id BETWEEN '0-#field#' AND '0-#field#.'` -> _global_field,
      #root# match {
        #self# has 'fuzzy' => `AND instr(lower(property),'#fuzzy#')>0`,
        _ => ''
      } -> _condition,
     => `SELECT property FROM #_category#.property WHERE #_field# #_condition# UNION SELECT property FROM #_category#.property WHERE #_global_field# #_condition#`
  }.join(' UNION ALL ')
}}
) s
{{
  match {
    #self# has 'pages' & #pages# has 'direction' & #pages# has 'size' => `ORDER BY property #pages.direction# LIMIT #pages.size#`,
    #self# has 'pages' & #pages# has 'direction' => `ORDER BY property #pages.direction#`,
    #self# has 'pages' & #pages# has 'size' => `ORDER BY property LIMIT #pages.size#`,
    _ => ''
  }
}};
    """
}