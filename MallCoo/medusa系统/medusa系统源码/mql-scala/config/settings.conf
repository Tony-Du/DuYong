settings = {
  time_range:
    """{{
        #time_range.0# match {
          #0# is 'empty' & #1# is 'empty' => '',
          #0# is 'empty' => `(month<to_date(trunc('#1#','MM')) AND day<'#1#')`,
          #1# is 'empty' => `(month>to_date(trunc('#0#','MM')) AND day>'#0#')`,
          _ => `(month BETWEEN to_date(trunc('#0#','MM')) AND to_date(trunc('#1#','MM')) AND day BETWEEN '#0#' AND '#1#')`
        }
    }}"""
  id_range: """{{ `id BETWEEN '#projectid#-' AND '#projectid#-z'` }}"""
  project_filter: """{{ `projectid='#projectid#'` }}"""
  project: """{{ @id_range }} AND {{ @project_filter }}"""
  event_filter: """{{ #filter.event#.where() }}"""
  user_filter: """{{ #filter.user#.where() }}"""
  filter: """{{ #self#.union(#filter.event#,#filter.user#,#filter.all#).map(#self#.where()).join(' AND ') }}"""

  period:
    """{{
     #period#.match {
       'day' => 'day period',
       'week' => `to_date(trunc(day,'D')) period`,
       'month' => `trunc(day,'MM') period`
     }
    }}"""

  expressions_limit:
    """{{
      #expressions#.map {
        #limits#.map {
            #expression#.replace('(\w+/\w+)','udf.to_num(#1)') -> ex,
            match {
              #self# has 'format' & #format# = 'percent' => `cast(#ex# as decimal(38,2)) * 100`,
              _  => `#ex#`
            } -> exp,
            #start#.prefix('>=') -> start,
            #end#.prefix('<=') -> end,
            #self#.union(#start#,#end#).map(`#exp##self#`).join(' AND ') -> l
          => `(#ex# IS NULL OR (#ex# IS NOT NULL AND #l#))`
        }.join('AND')
      }
    }}"""

  expressions_limit2:
   """{{
     #expressions2#.map {
       #limits#.map {
         #expression# -> ex,
         match {
           #self# has 'format' & #format# = 'percent' => `cast(#ex# as decimal(38,2)) * 100`,
           _  => `#ex#`
         } -> exp,
         #start#.prefix('>=') -> start,
         #end#.prefix('<=') -> end,
         #self#.union(#start#,#end#).map(`#exp##self#`).join(' AND ') -> l
       => `(#ex# IS NULL OR (#ex# IS NOT NULL AND #l#))`
       }.join('AND')
     }
    }}"""

  __measure:
    """{{
      match {
        #measure# = 'distinct_totalcount' => 'COALESCE(count(DISTINCT mallcoo_id),0)',
        #measure# = 'shop_totalcount' => 'COALESCE(count(DISTINCT mallcoo_id),0)',
        #measure# = 'count' => 'COALESCE(count(DISTINCT mallcoo_id),0)',
        #measure# = 'sum' => `COALESCE(sum(#field#),0)`,
        #measure# = 'totalcount' => 'COALESCE(count(mallcoo_id),0)',
        #measure# = 'uniqueAvgCount' => 'COALESCE(count(mallcoo_id)/count(DISTINCT mallcoo_id),0)',
        #measure# = 'average' => `COALESCE(avg(#field#),0)`,
        #measure# = 'max' => `COALESCE(max(#field#),0)`,
        #measure# = 'min' => `COALESCE(min(#field#),0)`,
        #measure# = 'uniqeAvg' => `COALESCE(sum(#field#)/count(DISTINCT mallcoo_id),0)`,
        #measure# = 'day' => 'COALESCE(count(DISTINCT day),0)',
        #measure# = 'hour' => 'COALESCE(count(DISTINCT hour),0)',
        #measure# = 'distinct' => `COALESCE(count(DISTINCT #field#),0)`,
        #measure# = 'distinct_sum' => `COALESCE(cast(udf.distinct_sum(mallcoo_id,#field#) as double),0)`
       }
    }}"""

  __measure_alias:
    """{{
      match {
        #self# has 'field' => `#field#_#measure#`,
        _ => `#measure#`
      }
    }}"""

  measure: """{{ #measures#.map(@__measure).join(',') }}"""
  measure_with_alias: """{{ #measures#.map(@__measure -> measure, #alias# -> alias => `#measure# #alias#`).join(',') }}"""
  event_type_measure_with_alias:
    """{{
      #measures#.map {
          @__measure -> x,
          #alias# -> alias,
          #event_type# -> event_type
        =>
          match {
            #event_type# is 'number' => `if(event_type=#event_type#,#x#,NULL) #alias#`,
            _ => `#x# #alias#`
          }
      }.join(',')
    }}"""

  __measure_step2:
    """{{
        match {
          #measure# = 'distinct_totalcount' => 'count(DISTINCT mallcoo_id)',
          #measure# = 'shop_totalcount' => 'count(DISTINCT mallcoo_id)',
          #measure# = 'count' => 'count(DISTINCT mallcoo_id)',
          #measure# = 'sum' => `COALESCE(sum(#field#_sum),0)`,
          #measure# = 'totalcount' => 'COALESCE(sum(cnt),0)',
          #measure# = 'uniqueAvgCount' => 'COALESCE(cast(sum(cnt)/count(DISTINCT mallcoo_id) as decimal(38,2)),0)',
          #measure# = 'average' => `COALESCE(cast(sum(#field#_sum)/sum(cnt) as decimal(38,2)),0)`,
          #measure# = 'max' => `COALESCE(max(#field#_max),0)`,
          #measure# = 'min' => `COALESCE(min(#field#_min),0)`,
          #measure# = 'uniqeAvg' => `COALESCE(cast(sum(#field#_sum)/count(DISTINCT mallcoo_id) as decimal(38,2)),0)`,
          #measure# = 'distinct' => `COALESCE(count(DISTINCT #field#_distinct),0)`,
          #measure# = 'distinct_sum' => `COALESCE(cast(udf.distinct_sum(mallcoo_id,#field#_max) as double),0)`
        }
      }
    }}"""

  event_type_measure_step2_with_alias:
    """{{
      #measures#.map {
            #event_type# -> event_type,
            @__measure_step2 -> step2,
            #alias# -> alias
          => match {
                #step2# isnot 'empty' => `if(event_type=#event_type#,#step2#,NULL) #alias#`
              }
      }.join(',')
    }}"""

  user_measure:
    """{{
      #measures#.map {
        match {
          #measure# = 'distinct_totalcount' => 'mallcoo_id',
          #measure# = 'shop_totalcount' => 'mallcoo_id',
          #measure# = 'count' => 'mallcoo_id',
          #measure# = 'uniqueAvgCount' => 'mallcoo_id',
          #measure# = 'uniqeAvg' => 'mallcoo_id',
          #measure# = 'distinct_sum' => 'mallcoo_id'
        }
      }.distinct.join(',',',','')
    }}"""

  event_measure:
    """{{
      #measures#.map {
        match {
          #measure# = 'sum' => `sum(#field#) #field#_#measure#`,
          #measure# = 'totalcount' => 'count(*) cnt',
          #measure# = 'uniqueAvgCount' => 'count(*) cnt',
          #measure# = 'average' => union('count(*) cnt',`sum(#field#) #field#_sum`),
          #measure# = 'max' => `max(#field#) #field#_#measure#`,
          #measure# = 'min' => `min(#field#) #field#_#measure#`,
          #measure# = 'uniqeAvg' => `sum(#field#) #field#_sum`,
          #measure# = 'distinct_sum' => `max(#field#) #field#_max`
        }
      }.flatten.distinct.join(',',',','')
    }}"""

  group_measure:
    """
{{
  #measures#.map {
      match{
        #event_type# is 'number' => `event_type=#event_type#`,
        _ => `1=1`
      } -> e_filter,
      match{
        #self# has 'alias' => #alias#,
        _ => #measure#
      } ->alias
    =>
    match {
      #measure# = 'totalcount' => `COALESCE(count(CASE WHEN #e_filter# THEN id END),0) #alias#`,
      #measure# = 'day' => `COALESCE(ndv(CASE WHEN #e_filter# THEN day END),0) #alias#`,
      #measure# = 'day_count' => `COALESCE(ndv(CASE WHEN #e_filter# THEN day END),0) #alias#`,
      #measure# = 'distinct' => `COALESCE(count(distinct CASE WHEN #e_filter# THEN #field# END),0) #alias#`,
      #measure# = 'sum' => `COALESCE(sum(CASE WHEN #e_filter# THEN #field# END),0) #alias#`,
      #measure# = 'average' => `COALESCE(avg(CASE WHEN #e_filter# THEN #field# END),0) #alias#`,
      #measure# = 'max' => `COALESCE(max(CASE WHEN #e_filter# THEN #field# END),0) #alias#`,
      #measure# = 'min' => `COALESCE(min(CASE WHEN #e_filter# THEN #field# END),0) #alias#`,
      #measure# = 'last_day' => `datediff(now(),max(day)) #alias#`,
      #measure# = 'distinct_sum' => `COALESCE(cast(udf.distinct_sum(mallcoo_id,CASE WHEN #e_filter# THEN #field# END) as double),0) #alias#`
    }
  }.join (',',',','')
}}
    """

  all_dimension: """{{ union(#dimensions.event#,#dimensions.user#,#dimensions.all#) }}"""
  __dimension:
    """{{
      match {
        #self# has 'preset' & #field# = 'time' => #preset#.match {
          'day' => 'day',
          'week' => `week`,
          'month' => `month`,
          'hour' => `trunc(day,'HH')`,
          'agg_event_hour' => 'hour',
          'agg_week' => `CASE dayofweek(day) WHEN 1 THEN '星期日' WHEN 2 THEN '星期一' WHEN 3 THEN '星期二' WHEN 4 THEN '星期三' WHEN 5 THEN '星期四' WHEN 6 THEN '星期五' WHEN 7 THEN '星期六' END`

        },
        #self# has 'preset' => match {
          #preset# = 'day' => `to_date(#field#)`,
          #preset# = 'week' => `to_date(trunc(#field#,'D'))`,
          #preset# = 'month' => `trunc(#field#,'MM')`,
          #preset# = 'hour' => `trunc(#field#,'HH')`,
          #preset# = 'agg_hour' => `from_unixtime(unix_timestamp(trunc(#field#,'HH')),'HH:mm:ss')`,
          #preset# = 'agg_week' => `CASE dayofweek(#field#) WHEN 1 THEN '星期日' WHEN 2 THEN '星期一' WHEN 3 THEN '星期二' WHEN 4 THEN '星期三' WHEN 5 THEN '星期四' WHEN 6 THEN '星期五' WHEN 7 THEN '星期六' END`
        },
        #self# has 'range' => #range#.map(#alias#.match{ #self# is 'string' => `'#self#'`, _ => `#self#` } -> alias, #filter#.where() -> filter => `WHEN #filter# THEN #alias#`).join('CASE ',' ',' END'),
        #field# = '_tag' & #self# has 'filter' => `#field#`,
        #field# = '_tag' => '_tag_dim',
        #field# is 'number' => `cast(#field# as decimal(38,2))`,
        _ => `#field#`
      }
    }}"""

  __dimension_unknown: """{{ `IF(#dimension# IS NULL OR trim(cast(#dimension# AS STRING))='', '未知',cast(#dimension# AS STRING)) #alias#` }}"""

  event_dimension_with_alias:
    """{{
      #dimensions.event#.map {
          @__dimension -> dimension,
          #alias# -> alias,
          match {
            #self# has 'event_type' => #event_type#,
            _ => ''
          } -> event_type
        => match {
          #event_type# = '' => @__dimension_unknown,
          _ => `if(event_type=#event_type#,IF(#dimension# IS NULL OR trim(cast(#dimension# AS STRING))='', '未知',cast(#dimension# AS STRING)),NULL) #alias#`
        }
      }.join(',')
    }}"""

  user_dimension_with_alias: """{{ #dimensions.user#.map { @__dimension -> dimension, #alias# -> alias => @__dimension_unknown}.join(',') }}"""

  dimension_with_alias: """{{ #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map { @__dimension -> dimension, #alias# -> alias => @__dimension_unknown }.join(',') }}"""

  dimension: """{{ #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map { @__dimension -> dimension => `IF(#dimension# IS NULL OR trim(cast(#dimension# AS STRING))='', '未知',cast(#dimension# AS STRING)) dimension` }.join(',') }}"""

  dimensions_without_alias: """{{ #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map { @__dimension -> dimension => `IF(#dimension# IS NULL OR trim(cast(#dimension# AS STRING))='', '未知',cast(#dimension# AS STRING))` }.join(',') }}"""

  dimension_without_alias: """{{ #self#.map { @__dimension -> dimension => `IF(#dimension# IS NULL OR trim(cast(#dimension# AS STRING))='', '未知',cast(#dimension# AS STRING))` }.join(',') }}"""

  dimension_alias_dim_list: """{{ #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map(`#alias#`).join(',') }}"""

  __database:
    """{{
      #category#.match {
        'user' => 'medusa',
        'shop' => 'medusa_shop'
      }
    }}"""

  user:
    """
    {{{ _tags <-
    {{
        #root.dimensions.user#.map(#tag_group#).flatten match {
          #self# is 'empty' => '',
          _ => #self#.map(`'#self#'`).join(',')
        }
    }}
    }}}
    {{{ __tag_group <-
    {{
      #dimensions.user#.map(#tag_group#).flatten match {
      #self# is 'empty' => '',
      _ => #self#.map(`SELECT '#self#' tag`).join('(',' UNION ALL ',')')
    }
    }}
    }}}
    {{{ _t <-
    {{
      #category# match {
        'user' => `(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view`,
        'shop' => `medusa_shop.kudu_current_user`
      }
    }}
    }}}
    {{{ _properties <-
    *{{
      #properties#.map {
        #self#.match {
        #self# has 'format' & #format# = 'int' => `cast(#property# as decimal(38,0)) #alias#`,
        #self# has 'format' & #format# = 'double' => `cast(#property# as decimal(38,2)) #alias#`,
        #self# has 'format' & #format# = 'percent' => `cast(#property# * 100 as decimal(38,2)) #alias#`,
        _ => `#property# #alias#`
      }
    }.join(',').prefix(',')
    }}
    }}}
    {{
      #self#.map {
          @_properties -> c,
          @__tag_group -> tag,
          @_tags -> ts,
          @_t -> t
        => match {
           #tag# = '' & #c# = '*' => `#t#`,
           #tag# = '' => `(SELECT #c# FROM #t#) _t`,
           _ =>  `(SELECT STRAIGHT_JOIN *,udf.has(_tag,tag) _tag_dim FROM (SELECT #c# FROM #t#)a CROSS JOIN #tag#b WHERE NOT(udf.has(_tag,tag) IS NULL AND udf.has(_tag,#ts#) IS NOT NULL))tag`
        }
      }
    }}
    """

  __table_suffix:
    """{{
      match {
        #self# has 'is_extend' & #is_extend# = 'true' => '_extend',
        #self# has 'is_any' & #is_any# = 'true' => '_any',
        _ => ''
      }
    }}"""

  event:
    """{{
      #self#.map {
          @__database -> category,
          @__table_suffix -> suffix
        => `#category#.event_view#suffix#`
        }
    }}"""

  table:
    """
    {{{ _tags <-
    {{
        #root.dimensions.user#.map(#tag_group#).flatten match {
          #self# is 'empty' => '',
          _ => #self#.map(`'#self#'`).join(',')
        }
    }}
    }}}
    {{{ __tag_group <-
    {{
      #dimensions.user#.map(#tag_group#).flatten match {
      #self# is 'empty' => '',
      _ => #self#.map(`SELECT '#self#' tag`).join('(',' UNION ALL ',')')
    }
    }}
    }}}
    {{{ _properties <-
    *{{
      #properties#.map {
        #self#.match {
        #self# has 'format' & #format# = 'int' => `cast(#property# as decimal(38,0)) #alias#`,
        #self# has 'format' & #format# = 'double' => `cast(#property# as decimal(38,2)) #alias#`,
        #self# has 'format' & #format# = 'percent' => `cast(#property# * 100 as decimal(38,2)) #alias#`,
        _ => `#property# #alias#`
      }
    }.join(',').prefix(',')
    }}
    }}}
    {{
      #self#.map {
          @_properties -> c,
          @__tag_group -> tag,
          @_tags -> ts,
          @__database -> category,
          @__table_suffix -> suffix
        => match {
           #tag# = '' & #c# = '*' => `#category#.kudu_event#suffix#`,
           #tag# = '' => `(SELECT #c# FROM #category#.kudu_event#suffix#) _t`,
           _ =>  `(SELECT STRAIGHT_JOIN *,udf.has(_tag,tag) _tag_dim FROM (SELECT #c# FROM #category#.kudu_event#suffix#)a CROSS JOIN #tag#b WHERE NOT(udf.has(_tag,tag) IS NULL AND udf.has(_tag,#ts#) IS NOT NULL))tag`
        }
      }
    }}
    """

  retention_list:
    """
    {{{ _retention_range <-
    {{
    #root.time_range#.map {
      #self# -> tr,
      #root.unit_days# match {
        'day' => 'days_add',
        'week' => 'weeks_add',
        'month' => 'months_add'
      } -> func,
      #root.duration# -> duration
    => `(day BETWEEN '#tr.0#' AND #func#('#tr.1#',#duration#))`
    }.join(' AND ')
    }}
    }}}

    {{{ _dimension_window_max <-
    {{
    match {
    #dimensions.event#.map(#field#) has 'time' => '',
    _ => #self#.union(#dimensions.event#,#dimensions.user#).map {
        `COALESCE(MAX(IF(#field# IS NULL OR trim(cast(#field# AS STRING))='',NULL,cast(#field# AS STRING))) OVER(PARTITION BY mallcoo_id),'未知') dimension`
      }.join(',',',','')
    }
    }}
    }}}

    {{{ _time_dimension <-
    {{
    #unit_days# match {
    'day' => 'day',
    'week' => 'to_date(date_sub(day,dayofweek(date_sub(day,1))-1))',
    'month' => 'getmonth(day)'
    }
    }}
    }}}

    {{{ _duration <-
    {{
    #root.unit_days# match {
    'day' => 'datediff(second_event.time,first_event.time)',
    'week' => 'ceil(datediff(second_event.time,first_event.time)/7)',
    'month' => 'ceil(months_between(second_event.time,first_event.time))'
    }
    }}
    }}}

    {{{ _dimension_type <-
    {{
    match {
    #dimensions.event#.map(#field#) has 'time' => 'time',
    _ => 'dimension'
    }
    }}
    }}}


    {{{ _dimension_type <-
    {{
    #root# match {
    #dimensions.event#.map(#field#) has 'time' => 'time',
    _ => 'dimension'
    }
    }}
    }}}

    {{{ _event_dimension <-
    {{
    #dimension_type# match {
    'first_event' => 'first_event',
    'second_event' => 'second_event',
    _ => 'first_event'
    }
    }}
    }}}

    {{{ _dimension_filter_name <-
    {{ @_event_dimension }}.{{ @_dimension_type }}
    }}}


    {{{ _dimension_filter <-
    {{
    #self#.union(#dimensions.event#, #dimensions.user#).map(#filter#.where(@_dimension_filter_name)).join('AND','AND','')
    }}
    }}}

    {{{ _dimension_group_max <-
    {{
    #self#.@all_dimension().map {
      #filter# -> filter,
      @__dimension -> dimension,
      #self# -> dim,
      #field# -> field,
      @_time_dimension -> time,
      `IF(#dimension# IS NULL OR trim(cast(#dimension# AS STRING))='', NULL,cast(#dimension# AS STRING))` -> dimension_string
    => match {
       #field# = 'time' => #filter#.where(#time#),
       #filter.query.head.0.values.0# is 'number' => #filter#.where(`max(#dimension#)`),
       _ => #filter#.where(`COALESCE(max(#dimension_string#), '未知')`)
    }
    }.join(' AND ',' AND ','')
    }}
    }}}

    {{{ _has_duration <-
    SELECT DISTINCT first_event.mallcoo_id
    FROM (
    SELECT mallcoo_id,{{ @_time_dimension }} time {{ @_dimension_window_max }}
    FROM {{ @table }}
    WHERE {{ @project }} AND {{ @time_range }} AND {{ #first_event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
    ) first_event LEFT JOIN (
    SELECT mallcoo_id,{{ @_time_dimension }} time {{ @_dimension_window_max }}
    FROM {{ @table }}
    WHERE {{ @project }} AND {{ @_retention_range }} AND {{ #second_event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
    ) second_event ON first_event.mallcoo_id=second_event.mallcoo_id
    WHERE {{ #duration_filter#.where(@_duration) }} AND first_event.time<=second_event.time {{ @_dimension_filter }}
    }}}

    {{{ _no_duration <-
    SELECT mallcoo_id
    FROM {{ @table }}
    WHERE {{ @project }} AND {{ @_retention_range }} AND ({{ #first_event_filter#.where() }} OR {{ #second_event_filter#.where() }}) {{ #user_filter#.where().prefix('AND') }}
    GROUP BY mallcoo_id
    {{
    match {
    #dimensions.event#.map(#field#) has 'time' => #self#.@_time_dimension().prefix(','),
    _ => ''
    }
    }}
    HAVING sum(if( {{ @time_range }} AND {{ #first_event_filter#.where() }}, 1, 0))>0 {{ @_dimension_group_max }}
    }}}

    {{
    match {
    #self# has 'duration_filter' => @_has_duration,
    _ => @_no_duration
    }
    }}

    """

  funnel_list:
    """
    SELECT
    mallcoo_id,
    cast(udf.funnel(action,ts,{{ #steps#.index('1').map(#index#).join('"',',','"') }},{{ #window_length# }}) AS INT) step
    {{
       #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map(#event_type#).match {
           #self#.size = '1' => `event_type=#self.0#`,
           _ => #root.steps.0#.where()
       }.map(`COALESCE(max(IF(#self#,IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING)),NULL)),'未知') dimension`).join(',','','')
    }}
    FROM (
    SELECT
    mallcoo_id,ts,event_type,
    {{
     #steps#.index('1').map {
         #index# -> index,
         #value#.where() -> filter
       => `WHEN #filter# THEN #index#`
     }.join('CASE ',' ',' END')
    }} action
    {{ #self#.@dimensions_without_alias().prefix(',').suffix(' _dim') }}
    FROM {{ @table }}
    WHERE {{ @project }} AND {{ @time_range }} AND ({{ #steps#.map(#self#.where()).join('OR') }}) {{ #filter.all#.where().prefix('AND') }}
    ) f
    WHERE action>0
    GROUP BY mallcoo_id
    HAVING
    {{
    match {
    #step_type# = 'churn' =>  `step=#step_num#-1`,
    #step_type# = 'conversion' => `step>=#step_num#`
    }
    }}
    {{
    #self#.union(#dimensions.event#,#dimensions.user#,#dimensions.all#).map(#filter#.where('dimension')).join('AND','AND','')
    }}
    """

  user_info:
    """
    {{
      #category# match {
        'user' =>'_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user',
        'shop' => '_shop_name,_floor_name,_shop_area,_commercial_type,_sub_commercial_type,_settled_time FROM medusa_shop.kudu_current_user'
      }
    }}
    """

  user_detail_info:
    """
    {{
      #category# match {
        'user' => '_mac,_uuid,_uid,_openid,_membercard_id,_membercard,_membercard_bonus,_mobile,_name,_id_card,_gender,_birthday,_province,_city,_area,_address,_hascar,_mobile_brand,_mobile_os,_loc_first_time,_portal_first_time,_app_first_time,_wechat_follow_time,_register_time,_register_source,_membercard_id IS NOT NULL AS _is_member,_plate_no,_tag',
        'shop' => '_shop_name,_floor_name,_shop_area,_commercial_type,_sub_commercial_type,_settled_time,_rent_type,_tag'
      }
    }}
    """

  compare:
    """
    {{
      match {
        #self# has 'expressions2' => #expressions2#.map(#raw#).join('(','',')'),
        _ => #measures#.map {
          match {
            #self# has 'alias' => #alias#,
            _ => #measure#
          }
        }.join('')
      }
    }}
    """

  pages:
    """
    {{{ _order <-
    {{
      match {
      #self# has 'order' & #self# has 'direction' => `ORDER BY #order# #direction#`,
      #self# has 'order' => `ORDER BY #order#`,
      _ => ''
      }
    }}
    }}}

    {{{ _limit <-
    {{
      match {
      #self# has 'size' & #size# <> '0' => `LIMIT #size#`,
      _ => ''
      }
    }}
    }}}

    {{{ _offset <-
    {{
      match {
      #self# has 'start' => `OFFSET #start#`,
      _ => ''
      }
    }}
    }}}

    {{
      match {
      #self# has 'pages' => #pages#.map {
          @_order -> order,
          @_limit -> limit,
          @_offset -> offset
            => `#order# #limit# #offset#`
        },
      _ => ''
      }
    }}
    """

  segment_list:
    """
{{{ group_dimension <-
{{ #groups#.map(#self#).join(',',',','') }}
}}}

{{{ measure_filter <-
{{
  match {
    #self# has 'expressions2' => #expressions2#.map {
        #raw#.prefix('(').suffix(')') -> _measure
      =>#filter#.where(#_measure#)
    }.prefix(' HAVING '),
    _ => #measures#.map {
        `#alias#`-> _measure
      => #filter#.where(#_measure#)
    }.prefix(' HAVING ')
}
}}
}}}


{{{ _user_event <-
SELECT mallcoo_id
FROM {{@user}} WHERE {{@project}} {{ #user_filter#.where().prefix('AND') }} GROUP BY mallcoo_id
}}}

{{{ _common_event <-
SELECT mallcoo_id FROM (
SELECT mallcoo_id {{ @group_measure }}
FROM {{ @table }} WHERE {{ @project }} AND {{ @time_range }} AND {{ #event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
GROUP BY mallcoo_id {{ @group_dimension }}{{ @measure_filter }} ) common
}}}

{{{ _no_event <-
SELECT m1.mallcoo_id FROM (
SELECT mallcoo_id
FROM {{ @user }}
WHERE {{ @project }} AND mallcoo_id=distinct_id {{ #user_filter#.where().prefix('AND') }}
) m1 LEFT JOIN (
SELECT DISTINCT mallcoo_id
FROM {{ @table }}
WHERE {{ @project }} AND {{ @time_range }} AND {{ #event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
) m2 ON m1.mallcoo_id=m2.mallcoo_id
WHERE m2.mallcoo_id IS NULL
}}}


{{{ _consecutive_event <-
SELECT mallcoo_id
FROM (
SELECT
mallcoo_id,
{{
  #timedimension#.match {
    'day' => `date_sub`,
    'week' => `weeks_sub`,
    'month' => `months_sub`
  }
}}(day,cn) dts,count(*) dcn {{ @group_dimension }}
FROM (
SELECT s.*,ROW_NUMBER() OVER(PARTITION BY mallcoo_id {{ @group_dimension }} ORDER BY day ASC) cn
FROM (
  SELECT
    t.*,
    ({{@compare}}-lag({{@compare}},1,0) OVER(PARTITION BY mallcoo_id {{ @group_dimension }} ORDER BY day))/lag({{@compare}},1,0) OVER(PARTITION BY mallcoo_id {{ @group_dimension }} ORDER BY day) ratio
   FROM (
    SELECT
      mallcoo_id, {{
      #timedimension#.match {
        'day' => 'day',
        'week' => `to_date(trunc(day,'D'))`,
        'month' => `to_date(trunc(day,'MM'))`
      }} day {{ @group_dimension }} {{ @group_measure }}
    FROM {{ @table }} WHERE {{ @project }} AND {{ @time_range }} AND {{ #event_filter#.where() }} {{ #user_filter#.where().prefix('AND') }}
GROUP BY
mallcoo_id,
day
{{ @group_dimension }}
{{
  match {
    #self# has 'ratio' => ``,
    _=>@measure_filter
  }
 }}
) t
)s
{{
#ratio# match {
 #ratio_type# = 'increase' & #self# has 'filter'  =>#filter#.where(`abs(ratio*100)`).prefix('having ratio >0 and' ),
 #ratio_type# = 'decrease' & #self# has 'filter'  =>#filter#.where(`abs(ratio*100)`).prefix('having ratio <0 and' ),
 #ratio_type# = 'increase' => 'having ratio >0',
 #ratio_type# = 'decrease' => 'having ratio <0',
 _ => ''
}
}})j GROUP BY mallcoo_id,dts {{ @group_dimension }}
)k
GROUP BY mallcoo_id {{ @group_dimension }} HAVING max(dcn)>={{ #continue_time# }}
}}}

{{{ _select <-
{{
#self# match {
#event_model# = 'common' => @_common_event,
#event_model# = 'consecutive' => @_consecutive_event,
#event_model# = 'no' => @_no_event,
_ => '11'
}
}}
}}}

{{{ _select_list <-
{{
#self# match {
#self# has 'event_filters' =>
#operator# match {
'or' => #event_filters#.map(@_select).join(' UNION ').prefix('select mallcoo_id from (').suffix(') m'),
'and' => #event_filters#.index('1').map(`select t1.mallcoo_id from () t#index# ` -> tablename,`()t#index# on (t1.mallcoo_id=t#index#.mallcoo_id) ` ->on,#index# -> index,#value#.map(@_select) ->value =>`select t1.mallcoo_id from (#value#) t#index# ` -> first,
`(#value#) t#index# on (t1.mallcoo_id=t#index#.mallcoo_id) ` ->other,#index# -> index =>#index# match {#self#='1' =>#first#,_=>#other# }).join(' JOIN '),
_ => ``
},
_ => @_user_event
}
}}
}}}

{{{ _select_list_common <-
SELECT m.mallcoo_id mallcoo_id
FROM (
SELECT * FROM {{ @user }} WHERE {{ @project }}
) m JOIN ({{@_select_list}}) n ON m.distinct_id =n.mallcoo_id
}}}

{{{ _select_list_top <-
SELECT l.mallcoo_id mallcoo_id
FROM (
SELECT * FROM {{ @user }} WHERE {{ @project }}
) l JOIN (
SELECT m.mallcoo_id {{ #top_event#.@group_measure }}
FROM (
SELECT * FROM {{ #top_event#.@table }} WHERE {{ @project }} AND {{ #top_event#.@time_range }} AND {{ #top_event.event_filter#.where() }}
) m JOIN ({{@_select_list}}) n ON m.mallcoo_id =n.mallcoo_id
GROUP BY mallcoo_id
ORDER BY {{ #top_event#.@compare }} {{#top_event.pages.direction#}} LIMIT {{#top_event.pages.size#}}
) z ON l.distinct_id=z.mallcoo_id
}}}


{{
#self# match {
#self# has 'top_event' => @_select_list_top,
_ => @_select_list_common
}
}}
"""


}


