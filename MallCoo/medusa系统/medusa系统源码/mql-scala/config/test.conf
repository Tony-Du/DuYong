test {
  segmentation: {
    自定义指标无分组用户过滤加单事件过滤 {
      parameter:
        """
{
  "parameter": {
    "time_range": [["2016-01-01", "2016-02-01"],[null,"2016-02-01"]],
    "projectid": 10,
    "measures_groups": [
      {
        "measures": [
          {
            "event_type": 25001,
            "measure": "sum",
            "field": "payment_amount",
            "alias": "25001_payment_amount_sum",
            "group" : true
          },
          {
            "event_type": 10002,
            "measure": "distinct_totalcount",
            "alias": "10002_distinct_totalcount",
            "group" : true
          }
        ]
      }
    ],
    "expressions": [
      {
        "expression": "25001_payment_amount_sum/10002_distinct_totalcount",
        "alias": "customer_measure",
        "format": "int",
        "limits": [
           {
             "expression":"25001_payment_amount_sum/10002_distinct_totalcount",
             "format": "int",
             "start": 0
           }
        ]
      }
    ],
    "filter": {
      "event": {
        "Query": {
          "Should": [{
            "Query": {
              "Must": [{
                "Code": "event_type",
                "Operator": "equals",
                "Values": [ 25001 ]
              },{
                "Code": "payment_amount",
                "Operator": "greaterthan",
                "Values": [ 0 ]
              }]
            }
          },{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 10002 ]
          }]
        }
      },
      "user": {
        "Query": {
          "Must": [{
            "Code": "_gender",
            "Operator": "equals",
            "Values": [ "男" ]
          }]
        }
      }
    },
    "category" : "user"
  },
  "model": "segmentation",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
SELECT COALESCE(cast(25001_payment_amount_sum/10002_distinct_totalcount as decimal(38,0)),0) customer_measure FROM(SELECT sum(10002_distinct_totalcount) 10002_distinct_totalcount,sum(25001_payment_amount_sum) 25001_payment_amount_sum FROM(SELECT 10002_distinct_totalcount_max 10002_distinct_totalcount,25001_payment_amount_sum_max 25001_payment_amount_sum FROM(SELECT max(type)type,max(10002_distinct_totalcount) 10002_distinct_totalcount_max,max(25001_payment_amount_sum) 25001_payment_amount_sum_max,NULL period FROM(SELECT straight_join if(event_type=25001,COALESCE(sum(payment_amount_sum),0),NULL) 25001_payment_amount_sum,if(event_type=10002,count(DISTINCT mallcoo_id),NULL) 10002_distinct_totalcount,1 type FROM(SELECT distinct_id,mallcoo_id FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '10-' AND '10-z' AND (_gender='男'))u JOIN /* +BROADCAST */(SELECT distinct_id,event_type,sum(payment_amount) payment_amount_sum FROM medusa.event_view WHERE(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-02-01','MM')) AND day BETWEEN '2016-01-01' AND '2016-02-01')AND projectid='10' AND(event_type=10002 OR (payment_amount>0 AND event_type=25001))GROUP BY event_type,distinct_id)e ON u.distinct_id=e.distinct_id GROUP BY event_type)a)y)x WHERE (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NULL OR (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NOT NULL AND udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount)>=0)))z;
SELECT COALESCE(cast(25001_payment_amount_sum/10002_distinct_totalcount as decimal(38,0)),0) customer_measure FROM(SELECT sum(10002_distinct_totalcount) 10002_distinct_totalcount,sum(25001_payment_amount_sum) 25001_payment_amount_sum FROM(SELECT 10002_distinct_totalcount_max 10002_distinct_totalcount,25001_payment_amount_sum_max 25001_payment_amount_sum FROM(SELECT max(type)type,max(10002_distinct_totalcount) 10002_distinct_totalcount_max,max(25001_payment_amount_sum) 25001_payment_amount_sum_max,NULL period FROM(SELECT straight_join if(event_type=25001,COALESCE(sum(payment_amount_sum),0),NULL) 25001_payment_amount_sum,if(event_type=10002,count(DISTINCT mallcoo_id),NULL) 10002_distinct_totalcount,1 type FROM(SELECT distinct_id,mallcoo_id FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '10-' AND '10-z' AND (_gender='男'))u JOIN /* +BROADCAST */(SELECT distinct_id,event_type,sum(payment_amount) payment_amount_sum FROM medusa.event_view WHERE(month<to_date(trunc('2016-02-01','MM')) AND day<'2016-02-01')AND projectid='10' AND(event_type=10002 OR (payment_amount>0 AND event_type=25001))GROUP BY event_type,distinct_id)e ON u.distinct_id=e.distinct_id GROUP BY event_type)a)y)x WHERE (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NULL OR (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NOT NULL AND udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount)>=0)))z;
        """
    }
    自定义指标按天和单事件区间及用户属性分组 {
      parameter:
        """
{
  "parameter": {
    "time_range": [["2016-01-01","2016-02-01"],[null,"2016-02-01"]],
    "projectid": 10,
    "measures_groups": [
      {
        "measures": [
          {
            "event_type": 25001,
            "measure": "sum",
            "field": "payment_amount",
            "alias": "25001_payment_amount_sum",
            "group" : true
          },
          {
            "event_type": 10002,
            "measure": "distinct_totalcount",
            "alias": "10002_distinct_totalcount",
            "group" : false
          }
        ]
      }
    ],
    "expressions": [{
      "expression": "25001_payment_amount_sum/10002_distinct_totalcount",
      "alias": "customer_measure",
      "format": "percent",
      "limits": [
        {
          "expression": "25001_payment_amount_sum/10002_distinct_totalcount",
          "format": "percent",
          "start": 0,
          "end": 80
        }
      ]
    }],
    "filter": {
      "event": {
        "Query": {
          "Should": [{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25001 ]
          },{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 10002 ]
          }]
        }
      }
    },
    "dimensions": {
      "event":[
        {
          "event_type": 25001,
          "field": "payment_amount",
          "alias": "payment_amount_dim",
          "range": [{
            "alias" : "10以下",
            "filter": {
              "Query": {
                "Must": [{
                    "Code": "payment_amount",
                    "Operator": "lessthan",
                    "Values": [ 10 ]
                }]
              }
            }
          },{
            "alias" : "10~20",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "payment_amount",
                  "Operator": "greaterthanorequals",
                  "Values": [ 10 ]
                },{
                  "Code": "payment_amount",
                  "Operator": "lessthan",
                  "Values": [ 20 ]
                }]
              }
            }
          },{
            "alias" : "20~100",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "payment_amount",
                  "Operator": "greaterthanorequals",
                  "Values": [ 20 ]
                },{
                  "Code": "payment_amount",
                  "Operator": "lessthan",
                  "Values": [ 100 ]
                }]
              }
            }
          },{
            "alias" : "100以上",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "payment_amount",
                  "Operator": "greaterthanorequals",
                  "Values": [ 100 ]
                }]
              }
            }
          }]
        },{
          "field": "time",
          "alias": "time_dim",
          "preset" : "day"
        }
      ],
      "user":[
        {
          "field": "_gender",
          "alias": "_gender_dim"
        }
      ]
    },
    "category" : "user"
  },
  "model": "segmentation",
  "compress": true,
  "transform": {}
}
        """
      mql:
       """
SELECT COALESCE(cast(25001_payment_amount_sum/10002_distinct_totalcount * 100 as decimal(38,2)),0) customer_measure,payment_amount_dim,time_dim,_gender_dim FROM(SELECT sum(10002_distinct_totalcount) 10002_distinct_totalcount,sum(25001_payment_amount_sum) 25001_payment_amount_sum,payment_amount_dim,time_dim,_gender_dim FROM(SELECT FIRST_VALUE(10002_distinct_totalcount_max) OVER(PARTITION BY _gender_dim,time_dim,type ORDER BY 10002_distinct_totalcount_max DESC NULLS LAST) 10002_distinct_totalcount,25001_payment_amount_sum_max 25001_payment_amount_sum,payment_amount_dim,time_dim,_gender_dim FROM(SELECT max(type)type,max(10002_distinct_totalcount) 10002_distinct_totalcount_max,max(25001_payment_amount_sum) 25001_payment_amount_sum_max,payment_amount_dim,time_dim,_gender_dim,NULL period FROM(SELECT straight_join if(event_type=25001,COALESCE(sum(payment_amount_sum),0),NULL) 25001_payment_amount_sum,if(event_type=10002,count(DISTINCT mallcoo_id),NULL) 10002_distinct_totalcount,payment_amount_dim,time_dim,_gender_dim,1 type FROM(SELECT distinct_id,mallcoo_id,IF(_gender IS NULL OR trim(cast(_gender AS STRING))='', '未知',cast(_gender AS STRING)) _gender_dim FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '10-' AND '10-z')u JOIN /* +BROADCAST */(SELECT distinct_id,event_type,sum(payment_amount) payment_amount_sum,if(event_type=25001,IF(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END IS NULL OR trim(cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING))='', '未知',cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING)),NULL) payment_amount_dim,IF(day IS NULL OR trim(cast(day AS STRING))='', '未知',cast(day AS STRING)) time_dim FROM medusa.event_view WHERE(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-02-01','MM')) AND day BETWEEN '2016-01-01' AND '2016-02-01')AND projectid='10' AND(event_type=10002 OR event_type=25001)GROUP BY event_type,distinct_id,payment_amount_dim,time_dim)e ON u.distinct_id=e.distinct_id GROUP BY event_type,payment_amount_dim,time_dim,_gender_dim)a GROUP BY payment_amount_dim,time_dim,_gender_dim)y)x WHERE payment_amount_dim IS NOT NULL AND time_dim IS NOT NULL AND _gender_dim IS NOT NULL AND (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NULL OR (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NOT NULL AND cast(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) as decimal(38,2)) * 100>=0 AND cast(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) as decimal(38,2)) * 100<=80))GROUP BY payment_amount_dim,time_dim,_gender_dim)z;
SELECT COALESCE(cast(25001_payment_amount_sum/10002_distinct_totalcount * 100 as decimal(38,2)),0) customer_measure,payment_amount_dim,_gender_dim FROM(SELECT sum(10002_distinct_totalcount) 10002_distinct_totalcount,sum(25001_payment_amount_sum) 25001_payment_amount_sum,payment_amount_dim,_gender_dim FROM(SELECT FIRST_VALUE(10002_distinct_totalcount_max) OVER(PARTITION BY _gender_dim,type ORDER BY 10002_distinct_totalcount_max DESC NULLS LAST) 10002_distinct_totalcount,25001_payment_amount_sum_max 25001_payment_amount_sum,payment_amount_dim,_gender_dim FROM(SELECT max(type)type,max(10002_distinct_totalcount) 10002_distinct_totalcount_max,max(25001_payment_amount_sum) 25001_payment_amount_sum_max,payment_amount_dim,_gender_dim,NULL period FROM(SELECT straight_join if(event_type=25001,COALESCE(sum(payment_amount_sum),0),NULL) 25001_payment_amount_sum,if(event_type=10002,count(DISTINCT mallcoo_id),NULL) 10002_distinct_totalcount,payment_amount_dim,_gender_dim,1 type FROM(SELECT distinct_id,mallcoo_id,IF(_gender IS NULL OR trim(cast(_gender AS STRING))='', '未知',cast(_gender AS STRING)) _gender_dim FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '10-' AND '10-z')u JOIN /* +BROADCAST */(SELECT distinct_id,event_type,sum(payment_amount) payment_amount_sum,if(event_type=25001,IF(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END IS NULL OR trim(cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING))='', '未知',cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING)),NULL) payment_amount_dim FROM medusa.event_view WHERE(month<to_date(trunc('2016-02-01','MM')) AND day<'2016-02-01')AND projectid='10' AND(event_type=10002 OR event_type=25001)GROUP BY event_type,distinct_id,payment_amount_dim)e ON u.distinct_id=e.distinct_id GROUP BY event_type,payment_amount_dim,_gender_dim)a GROUP BY payment_amount_dim,_gender_dim)y)x WHERE payment_amount_dim IS NOT NULL AND _gender_dim IS NOT NULL AND (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NULL OR (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NOT NULL AND cast(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) as decimal(38,2)) * 100>=0 AND cast(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) as decimal(38,2)) * 100<=80))GROUP BY payment_amount_dim,_gender_dim)z;
       """
    }
    自定义日度指标按月和单事件区间分组 {
      parameter:
        """
 {
  "parameter": {
    "time_range": [["2016-01-01", "2016-02-01"]],
    "projectid": 10,
    "measures_groups": [
      {
        "period":"month",
        "measures": [
          {
            "event_type": 25001,
            "measure": "sum",
            "field": "payment_amount",
            "alias": "25001_payment_amount_sum",
            "group" : true,
          },
          {
            "event_type": 10002,
            "measure": "distinct_totalcount",
            "alias": "10002_distinct_totalcount",
            "group" : false
          },
          {
            "event_type": 25001,
            "measure": "distinct_totalcount",
            "alias": "25001_distinct_totalcount",
            "group" : true
          }
        ]
      }
    ],
    "expressions": [
      {
        "expression": "avg(25001_payment_amount_sum/10002_distinct_totalcount)",
        "alias": "customer_measure",
        "format": 'double',
        "period":"month"
      },
      {
        "expression": "sum(25001_distinct_totalcount)",
        "alias": "customer_measure2",
        "period":"month"
      }
    ],
    "filter": {
      "event" : {
        "Query": {
          "Should": [{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25001 ]
          },{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 10002 ]
          }]
        }
      }
    },
    "dimensions" : {
      "event":[
        {
          "event_type": 25001,
          "field": "payment_amount",
          "alias": "payment_amount_dim",
          "range": [{
            "alias" : "10以下",
            "filter": {
              "Query": {
                "Must": [{
                    "Code": "payment_amount",
                    "Operator": "lessthan",
                    "Values": [ 10 ]
                }]
              }
            }
          },{
            "alias" : "10~20",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "payment_amount",
                  "Operator": "greaterthanorequals",
                  "Values": [ 10 ]
                },{
                  "Code": "payment_amount",
                  "Operator": "lessthan",
                  "Values": [ 20 ]
                }]
              }
            }
          },{
            "alias" : "20~100",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "payment_amount",
                  "Operator": "greaterthanorequals",
                  "Values": [ 20 ]
                },{
                  "Code": "payment_amount",
                  "Operator": "lessthan",
                  "Values": [ 100 ]
                }]
              }
            }
          },{
            "alias" : "100以上",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "payment_amount",
                  "Operator": "greaterthanorequals",
                  "Values": [ 100 ]
                }]
              }
            }
          }]
        },
        {
          "field": "time",
          "alias": "time_dim",
          "preset" : "month"
        }
      ]
    },
    "category" : "user"
  },
  "model": "segmentation",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
SELECT COALESCE(cast(x00 as decimal(38,2)),0) customer_measure,COALESCE(x10,0) customer_measure2,payment_amount_dim,time_dim FROM(SELECT sum(25001_distinct_totalcount) 25001_distinct_totalcount,sum(10002_distinct_totalcount) 10002_distinct_totalcount,sum(25001_payment_amount_sum) 25001_payment_amount_sum,sum(25001_distinct_totalcount) x10,avg(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount)) x00,payment_amount_dim,time_dim FROM(SELECT 25001_distinct_totalcount_max 25001_distinct_totalcount,FIRST_VALUE(10002_distinct_totalcount_max) OVER(PARTITION BY time_dim,type ORDER BY 10002_distinct_totalcount_max DESC NULLS LAST) 10002_distinct_totalcount,25001_payment_amount_sum_max 25001_payment_amount_sum,payment_amount_dim,time_dim FROM(SELECT max(type)type,max(25001_distinct_totalcount) 25001_distinct_totalcount_max,max(10002_distinct_totalcount) 10002_distinct_totalcount_max,max(25001_payment_amount_sum) 25001_payment_amount_sum_max,payment_amount_dim,time_dim,period FROM(SELECT straight_join period,if(event_type=25001,COALESCE(sum(payment_amount_sum),0),NULL) 25001_payment_amount_sum,if(event_type=10002,count(DISTINCT mallcoo_id),NULL) 10002_distinct_totalcount,if(event_type=25001,count(DISTINCT mallcoo_id),NULL) 25001_distinct_totalcount,payment_amount_dim,time_dim,1 type FROM(SELECT distinct_id,mallcoo_id FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '10-' AND '10-z')u JOIN /* +BROADCAST */(SELECT distinct_id,event_type,sum(payment_amount) payment_amount_sum,if(event_type=25001,IF(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END IS NULL OR trim(cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING))='', '未知',cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING)),NULL) payment_amount_dim,IF(month IS NULL OR trim(cast(month AS STRING))='', '未知',cast(month AS STRING)) time_dim,trunc(day,'MM') period FROM medusa.event_view WHERE(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-02-01','MM')) AND day BETWEEN '2016-01-01' AND '2016-02-01')AND projectid='10' AND(event_type=10002 OR event_type=25001)GROUP BY event_type,distinct_id,payment_amount_dim,time_dim,period)e ON u.distinct_id=e.distinct_id GROUP BY event_type,payment_amount_dim,time_dim,period)a GROUP BY period,payment_amount_dim,time_dim)y)x WHERE payment_amount_dim IS NOT NULL AND time_dim IS NOT NULL GROUP BY payment_amount_dim,time_dim)z;
        """
    }
    自定义天数分组 {
      parameter:
        """
{
  "parameter": {
    "time_range": [["2016-01-01","2016-02-01"]],
    "projectid": 10,
    "measures_groups": [
      {
        "period":"day",
        "measures": [
          {
            "event_type": 25001,
            "measure": "sum",
            "field": "payment_amount",
            "alias": "25001_payment_amount_sum",
            "group" : true
          },
          {
            "event_type": 10002,
            "measure": "distinct_totalcount",
            "alias": "10002_distinct_totalcount",
            "group" : false
          },
          {
            "event_type": 25001,
            "measure": "distinct_totalcount",
            "alias": "25001_distinct_totalcount",
            "group" : true
          }
        ]
      }
    ],
    "expressions": [
      {
        "expression": "avg(25001_payment_amount_sum/10002_distinct_totalcount)",
        "alias": "customer_measure",
        "format": "percent",
        "limits": [
          {
            "expression": "25001_payment_amount_sum/10002_distinct_totalcount",
            "format": "percent",
            "start": 10,
            "end": 5000
          }
        ],
        "period":"day"
      },
      {
        "expression": "sum(25001_distinct_totalcount)",
        "alias": "customer_measure2",
        "format": "int",
        "limits": [
          {
            "expression": "25001_distinct_totalcount",
            "start": 100
          }
        ],
        "period":"day"
      }
    ],
    "filter": {
      "event": {
        "Query": {
          "Should": [{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25001 ]
          },{
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 10002 ]
          }]
        }
      }
    },
    "dimensions": {
      "event":[
        {
          "event_type": 25001,
          "field": "time",
          "alias": "time_dim",
          "range": [{
            "alias" : "10以下",
            "filter": {
              "Query": {
                "Must": [{
                    "Code": "time",
                    "Operator": "datelessthan",
                    "Values": [ 10 ]
                }]
              }
            }
          },{
            "alias" : "10~20",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "time",
                  "Operator": "dategreaterthanorequals",
                  "Values": [ 10 ]
                },{
                  "Code": "time",
                  "Operator": "datelessthan",
                  "Values": [ 20 ]
                }]
              }
            }
          },{
            "alias" : "20~100",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "time",
                  "Operator": "dategreaterthanorequals",
                  "Values": [ 20 ]
                },{
                  "Code": "time",
                  "Operator": "datelessthan",
                  "Values": [ 100 ]
                }]
              }
            }
          },{
            "alias" : "100以上",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "time",
                  "Operator": "dategreaterthanorequals",
                  "Values": [ 100 ]
                }]
              }
            }
          }]
        }
      ]
    },
    "category" : "user"
  },
  "model": "segmentation",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
SELECT COALESCE(cast(x00 * 100 as decimal(38,2)),0) customer_measure,COALESCE(cast(x10 as decimal(38,0)),0) customer_measure2,time_dim FROM(SELECT sum(25001_distinct_totalcount) 25001_distinct_totalcount,sum(10002_distinct_totalcount) 10002_distinct_totalcount,sum(25001_payment_amount_sum) 25001_payment_amount_sum,sum(25001_distinct_totalcount) x10,avg(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount)) x00,time_dim FROM(SELECT 25001_distinct_totalcount_max 25001_distinct_totalcount,FIRST_VALUE(10002_distinct_totalcount_max) OVER( ORDER BY 10002_distinct_totalcount_max DESC NULLS LAST) 10002_distinct_totalcount,25001_payment_amount_sum_max 25001_payment_amount_sum,time_dim FROM(SELECT max(type)type,max(25001_distinct_totalcount) 25001_distinct_totalcount_max,max(10002_distinct_totalcount) 10002_distinct_totalcount_max,max(25001_payment_amount_sum) 25001_payment_amount_sum_max,time_dim,period FROM(SELECT straight_join period,if(event_type=25001,COALESCE(sum(payment_amount_sum),0),NULL) 25001_payment_amount_sum,if(event_type=10002,count(DISTINCT mallcoo_id),NULL) 10002_distinct_totalcount,if(event_type=25001,count(DISTINCT mallcoo_id),NULL) 25001_distinct_totalcount,time_dim,1 type FROM(SELECT distinct_id,mallcoo_id FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '10-' AND '10-z')u JOIN /* +BROADCAST */(SELECT distinct_id,event_type,sum(payment_amount) payment_amount_sum,if(event_type=25001,IF(CASE WHEN (datediff(now(),time)<10) THEN '10以下' WHEN (datediff(now(),time)<20 AND datediff(now(),time)>=10) THEN '10~20' WHEN (datediff(now(),time)<100 AND datediff(now(),time)>=20) THEN '20~100' WHEN (datediff(now(),time)>=100) THEN '100以上' END IS NULL OR trim(cast(CASE WHEN (datediff(now(),time)<10) THEN '10以下' WHEN (datediff(now(),time)<20 AND datediff(now(),time)>=10) THEN '10~20' WHEN (datediff(now(),time)<100 AND datediff(now(),time)>=20) THEN '20~100' WHEN (datediff(now(),time)>=100) THEN '100以上' END AS STRING))='', '未知',cast(CASE WHEN (datediff(now(),time)<10) THEN '10以下' WHEN (datediff(now(),time)<20 AND datediff(now(),time)>=10) THEN '10~20' WHEN (datediff(now(),time)<100 AND datediff(now(),time)>=20) THEN '20~100' WHEN (datediff(now(),time)>=100) THEN '100以上' END AS STRING)),NULL) time_dim,day period FROM medusa.event_view WHERE(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-02-01','MM')) AND day BETWEEN '2016-01-01' AND '2016-02-01')AND projectid='10' AND(event_type=10002 OR event_type=25001)GROUP BY event_type,distinct_id,time_dim,period)e ON u.distinct_id=e.distinct_id GROUP BY event_type,time_dim,period)a GROUP BY period,time_dim)y)x WHERE time_dim IS NOT NULL AND (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NULL OR (udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) IS NOT NULL AND cast(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) as decimal(38,2)) * 100>=10 AND cast(udf.to_num(25001_payment_amount_sum/10002_distinct_totalcount) as decimal(38,2)) * 100<=5000)) AND (25001_distinct_totalcount IS NULL OR (25001_distinct_totalcount IS NOT NULL AND 25001_distinct_totalcount>=100))GROUP BY time_dim)z;
        """
    }
    店铺版自定义日度指标按月和单事件区间分组 {
      parameter:
        """
{
  "parameter": {
  "time_range": [["2017-05-01", "2017-05-31"]],
  "projectid": 1,
  "measures_groups": [
    {
      "period":"month",
      "measures": [
        {
          "event_type": 1001,
          "measure": "sum",
          "field": "cash_amount",
          "alias": "1001_cash_amount_sum",
          "group" : true
        },
        {
          "event_type": 1002,
          "measure": "distinct_totalcount",
          "alias": "1002_distinct_totalcount",
          "group" : false
        },
        {
          "event_type": 1001,
          "measure": "distinct_totalcount",
          "alias": "1001_distinct_totalcount",
          "group" : true
        }
      ]
    }
  ],
  "expressions": [
    {
      "expression": "avg(1001_cash_amount_sum/1002_distinct_totalcount)",
      "alias": "customer_measure",
      "format": "double",
      "period":"month"
    },
    {
      "expression": "sum(1001_distinct_totalcount)",
      "alias": "customer_measure2",
      "format": "int",
      "period":"month"
    }
  ],
  "filter": {
    "event" : {
      "Query": {
        "Should": [{
          "Code": "event_type",
          "Operator": "equals",
          "Values": [ 1001 ]
        },{
          "Code": "event_type",
          "Operator": "equals",
          "Values": [ 1002 ]
        }]
      }
    }
  },
  "dimensions" : {
    "event":[
      {
        "event_type": 1001,
        "field": "payment_amount",
        "alias": "payment_amount_dim",
        "range": [{
          "alias" : "10以下",
          "filter": {
            "Query": {
              "Must": [{
                  "Code": "cash_amount",
                  "Operator": "lessthan",
                  "Values": [ 10 ]
              }]
            }
          }
        },{
          "alias" : "10~20",
          "filter": {
            "Query": {
              "Must": [{
                "Code": "cash_amount",
                "Operator": "greaterthanorequals",
                "Values": [ 10 ]
              },{
                "Code": "cash_amount",
                "Operator": "lessthan",
                "Values": [ 20 ]
              }]
            }
          }
        },{
          "alias" : "20~100",
          "filter": {
            "Query": {
              "Must": [{
                "Code": "cash_amount",
                "Operator": "greaterthanorequals",
                "Values": [ 20 ]
              },{
                "Code": "cash_amount",
                "Operator": "lessthan",
                "Values": [ 100 ]
              }]
            }
          }
        },{
          "alias" : "100以上",
          "filter": {
            "Query": {
              "Must": [{
                "Code": "cash_amount",
                "Operator": "greaterthanorequals",
                "Values": [ 100 ]
              }]
            }
          }
        }]
      },
      {
        "field": "time",
        "alias": "time_dim",
        "preset" : "month"
      }
    ]
  },
  "category" : "shop"
  },
  "model": "segmentation",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
SELECT COALESCE(cast(x00 as decimal(38,2)),0) customer_measure,COALESCE(cast(x10 as decimal(38,0)),0) customer_measure2,payment_amount_dim,time_dim FROM(SELECT sum(1001_distinct_totalcount) 1001_distinct_totalcount,sum(1002_distinct_totalcount) 1002_distinct_totalcount,sum(1001_cash_amount_sum) 1001_cash_amount_sum,sum(1001_distinct_totalcount) x10,avg(udf.to_num(1001_cash_amount_sum/1002_distinct_totalcount)) x00,payment_amount_dim,time_dim FROM(SELECT 1001_distinct_totalcount_max 1001_distinct_totalcount,FIRST_VALUE(1002_distinct_totalcount_max) OVER(PARTITION BY time_dim,type ORDER BY 1002_distinct_totalcount_max DESC NULLS LAST) 1002_distinct_totalcount,1001_cash_amount_sum_max 1001_cash_amount_sum,payment_amount_dim,time_dim FROM(SELECT max(type)type,max(1001_distinct_totalcount) 1001_distinct_totalcount_max,max(1002_distinct_totalcount) 1002_distinct_totalcount_max,max(1001_cash_amount_sum) 1001_cash_amount_sum_max,payment_amount_dim,time_dim,period FROM(SELECT 1 type, event_type,mallcoo_id,if(event_type=1001,COALESCE(sum(cash_amount),0),NULL) 1001_cash_amount_sum,if(event_type=1002,COALESCE(count(DISTINCT mallcoo_id),0),NULL) 1002_distinct_totalcount,if(event_type=1001,COALESCE(count(DISTINCT mallcoo_id),0),NULL) 1001_distinct_totalcount,IF(CASE WHEN (cash_amount<10) THEN '10以下' WHEN (cash_amount<20 AND cash_amount>=10) THEN '10~20' WHEN (cash_amount<100 AND cash_amount>=20) THEN '20~100' WHEN (cash_amount>=100) THEN '100以上' END IS NULL OR trim(cast(CASE WHEN (cash_amount<10) THEN '10以下' WHEN (cash_amount<20 AND cash_amount>=10) THEN '10~20' WHEN (cash_amount<100 AND cash_amount>=20) THEN '20~100' WHEN (cash_amount>=100) THEN '100以上' END AS STRING))='', '未知',cast(CASE WHEN (cash_amount<10) THEN '10以下' WHEN (cash_amount<20 AND cash_amount>=10) THEN '10~20' WHEN (cash_amount<100 AND cash_amount>=20) THEN '20~100' WHEN (cash_amount>=100) THEN '100以上' END AS STRING)) payment_amount_dim,IF(month IS NULL OR trim(cast(month AS STRING))='', '未知',cast(month AS STRING)) time_dim,trunc(day,'MM') period FROM medusa_shop.kudu_event WHERE(month BETWEEN to_date(trunc('2017-05-01','MM')) AND to_date(trunc('2017-05-31','MM')) AND day BETWEEN '2017-05-01' AND '2017-05-31')AND id BETWEEN '1-' AND '1-z' AND projectid='1' AND(event_type=1002 OR event_type=1001)GROUP BY event_type,mallcoo_id,payment_amount_dim,time_dim,period)a GROUP BY mallcoo_id,period,payment_amount_dim,time_dim)y)x WHERE payment_amount_dim IS NOT NULL AND time_dim IS NOT NULL GROUP BY payment_amount_dim,time_dim)z;
        """
    }
  }
  scatter: {
    一天内度量区间二按月分组 {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "all": {
        "Query": {
          "Must": [
            {
              "Code": "_gender",
              "Operator": "equals",
              "Values": [ "男" ]
            },
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 25001 ]
            },
            {
              "Code": "payment_amount",
              "Operator": "greaterthan",
              "Values": [ 0 ]
            }
          ]
        }
      }
    },
    "measures": [
      {
        "event_type": 25001,
        "measure": "sum",
        "field": "payment_amount",
        "range": [
          {
            "alias" : "10以下",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 10 ]
                }]
              }
            }
          },
          {
            "alias" : "10~20",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 10 ]
                },{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 20 ]
                }]
              }
            }
          },
          {
            "alias" : "20以上",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 20 ]
                }]
              }
            }
          }
        ]
      }
    ],
    "dimensions" : {
      "event":[
        {
          "field": "time",
          "preset" : "month"
        }
      ]
    },
    "projectid": 10,
    "time_range": [["2016-01-01","2016-02-01"]],
    "measure_type": "accumulation",
    "unit_measure": 1,
    "category" : "user"
  },
  "model": "scatter",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
SELECT dimension,total,measure,person_number,cast(person_number/total as decimal(38,4))rate FROM(SELECT dimension,measure,SUM(pn) OVER(PARTITION BY dimension ORDER BY cast(measure as DOUBLE) DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) person_number,sum(pn)OVER(PARTITION BY dimension)total FROM(SELECT dimension,COUNT(*)pn,CASE WHEN (measure_per_unit<10) THEN '10以下' WHEN (measure_per_unit<20 AND measure_per_unit>=10) THEN '10~20' WHEN (measure_per_unit>=20) THEN '20以上' END measure FROM(SELECT mallcoo_id,dimension,round(sum/1)measure_per_unit FROM(SELECT mallcoo_id,IF(month IS NULL OR trim(cast(month AS STRING))='', '未知',cast(month AS STRING)) dimension,COALESCE(sum(CASE WHEN event_type=25001 THEN payment_amount END),0) sum FROM medusa.kudu_event WHERE id BETWEEN '10-' AND '10-z' AND projectid='10' AND(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-02-01','MM')) AND day BETWEEN '2016-01-01' AND '2016-02-01')AND(payment_amount>0 AND event_type=25001 AND _gender='男')GROUP BY mallcoo_id,dimension)m)n GROUP BY dimension,measure)v)z WHERE measure<>'0';
        """
    }
    一天内度量区间一按天分组 {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "all": {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 20001 ]
            }
          ]
        }
      }
    },
    "measures": [
      {
        "event_type": 20001,
        "measure": "totalcount",
        "range": [
          {
            "alias" : "2次以下",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 2 ]
                }]
              }
            }
          },
          {
            "alias" : "2~3次",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 2 ]
                },{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 3 ]
                }]
              }
            }
          },
          {
            "alias" : "3~5次",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 3 ]
                },{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 5 ]
                }]
              }
            }
          },
          {
            "alias" : "5次以上",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 5 ]
                }]
              }
            }
          }
        ]
      }
    ],
    "dimensions" : {
      "event":[
        {
          "field": "time",
          "preset" : "day"
        }
      ]
    },
    "projectid": 14,
    "time_range": [["2017-05-28","2017-06-11"]],
    "category" : "user",
    "unit_measure": "1",
    "measure_type":"default"
  },
  "model": "scatter",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
SELECT dimension,total,measure,person_number,cast(person_number/total as decimal(38,4))rate FROM(SELECT dimension,measure,pn person_number,sum(pn)OVER(PARTITION BY dimension)total FROM(SELECT dimension,COUNT(*)pn,CASE WHEN (measure_per_unit<2) THEN '2次以下' WHEN (measure_per_unit<3 AND measure_per_unit>=2) THEN '2~3次' WHEN (measure_per_unit<5 AND measure_per_unit>=3) THEN '3~5次' WHEN (measure_per_unit>=5) THEN '5次以上' END measure FROM(SELECT mallcoo_id,dimension,round(totalcount/1)measure_per_unit FROM(SELECT mallcoo_id,IF(day IS NULL OR trim(cast(day AS STRING))='', '未知',cast(day AS STRING)) dimension,COALESCE(count(CASE WHEN event_type=20001 THEN id END),0) totalcount FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(month BETWEEN to_date(trunc('2017-05-28','MM')) AND to_date(trunc('2017-06-11','MM')) AND day BETWEEN '2017-05-28' AND '2017-06-11')AND(event_type=20001)GROUP BY mallcoo_id,dimension)m)n GROUP BY dimension,measure)v)z WHERE measure<>'0';
        """
    }
    预分组自定义指标 {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "event": {
        "query": {
          "must": [
            {
              "code": "event_type",
              "operator": "in",
              "values": [25001, 25001]
            },
            {
              "values": [],
              "query": {
                "should": [
                  {
                    "values": [],
                    "query": {
                      "must": [
                        {
                          "code": "event_type",
                          "operator": "equals",
                          "values": [25001 ]
                        }
                      ]
                    }
                  },
                  {
                    "values": [],
                    "query": {
                      "must": [
                        {
                          "code": "event_type",
                          "operator": "equals",
                          "values": [25001 ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "measures": [
      {
        "event_type": 25001,
        "measure": "sum",
        "field": "payment_amount",
        "alias": "payment_amount_sum_25001",
        "group": true
      },
      {
        "event_type": 25001,
        "measure": "day_count",
        "alias": "day_count_25001",
        "group": true
      }
    ],
    "expressions": [
      {
        "expression": "avg(payment_amount_sum_25001/day_count_25001)",
        "alias": "customMeasure45",
        "format": "double",
        "range": [
            {
              "alias": "10以下",
              "filter": {
                "query": {
                  "must": [
                    {
                      "code": "measure",
                      "operator": "lessthan",
                      "values": [10 ]
                    }
                  ]
                }
              }
            },
            {
              "alias": "10~30",
              "filter": {
                "query": {
                  "must": [
                    {
                        "code": "measure",
                        "operator": "greaterthanorequals",
                        "values": [10 ]
                    },
                    {
                      "code": "measure",
                      "operator": "lessthan",
                      "values": [30 ]
                    }
                  ]
                }
              }
            },
            {
              "alias": "30~50",
              "filter": {
                "query": {
                  "must": [
                    {
                      "code": "measure",
                      "operator": "greaterthanorequals",
                      "values": [30 ]
                    },
                    {
                      "code": "measure",
                      "operator": "lessthan",
                      "values": [50 ]
                    }
                  ]
                }
              }
            },
            {
                "alias": "50~100",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    50
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    100
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "100~200",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    100
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    200
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "200~500",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    200
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    500
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "500~1000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    500
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    1000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "1000~5000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    1000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    5000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "5000~10000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    5000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    10000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "10000~50000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    10000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    50000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "50000~100000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    50000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    100000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "100000以上",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    100000
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "limits": [
           {
             "expression":"payment_amount_sum_25001/day_count_25001",
             "start": 1,
             "end": 1000,
             "format": "double"
           }
        ]
      }
    ],
    "dimensions": {
      "user": [],
      "event": [
        {
          "field": "projectID",
          "alias": "dimension"
        }
      ]
    },
    "projectid": 1,
    "time_range": [["2016-06-01", "2016-06-30"]],
    "category": "user",
    "measure_type": "default",
    "unit_measure": "1",
    "period":"day",
    "is_extend": false,
    "is_any": false
  },
  "model": "scatter"
}
        """
      mql:
        """
SELECT dimension,total,measure,person_number,cast(person_number/total as decimal(38,4))rate FROM(SELECT dimension,measure,pn person_number,sum(pn)OVER(PARTITION BY dimension)total FROM(SELECT dimension,COUNT(*)pn,CASE WHEN (measure_per_unit<10) THEN '10以下' WHEN (measure_per_unit<30 AND measure_per_unit>=10) THEN '10~30' WHEN (measure_per_unit<50 AND measure_per_unit>=30) THEN '30~50' WHEN (measure_per_unit<100 AND measure_per_unit>=50) THEN '50~100' WHEN (measure_per_unit<200 AND measure_per_unit>=100) THEN '100~200' WHEN (measure_per_unit<500 AND measure_per_unit>=200) THEN '200~500' WHEN (measure_per_unit<1000 AND measure_per_unit>=500) THEN '500~1000' WHEN (measure_per_unit<5000 AND measure_per_unit>=1000) THEN '1000~5000' WHEN (measure_per_unit<10000 AND measure_per_unit>=5000) THEN '5000~10000' WHEN (measure_per_unit<50000 AND measure_per_unit>=10000) THEN '10000~50000' WHEN (measure_per_unit<100000 AND measure_per_unit>=50000) THEN '50000~100000' WHEN (measure_per_unit>=100000) THEN '100000以上' END measure FROM(SELECT mallcoo_id,dimension,round(COALESCE(cast(avg(udf.to_num(payment_amount_sum_25001/day_count_25001)) as decimal(38,2)),0)/1)measure_per_unit FROM(SELECT mallcoo_id,IF(projectID IS NULL OR trim(cast(projectID AS STRING))='', '未知',cast(projectID AS STRING)) dimension,COALESCE(sum(CASE WHEN event_type=25001 THEN payment_amount END),0) payment_amount_sum_25001,COALESCE(ndv(CASE WHEN event_type=25001 THEN day END),0) day_count_25001,day period FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2016-06-01','MM')) AND to_date(trunc('2016-06-30','MM')) AND day BETWEEN '2016-06-01' AND '2016-06-30')AND(((event_type=25001) OR (event_type=25001)) AND event_type IN (25001,25001))GROUP BY mallcoo_id,dimension,period HAVING (udf.to_num(payment_amount_sum_25001/day_count_25001) IS NULL OR (udf.to_num(payment_amount_sum_25001/day_count_25001) IS NOT NULL AND udf.to_num(payment_amount_sum_25001/day_count_25001)>=1 AND udf.to_num(payment_amount_sum_25001/day_count_25001)<=1000)))m GROUP BY mallcoo_id,dimension)n GROUP BY dimension,measure)v)z WHERE measure<>'0';
        """
    }
    最后时间距今几天 {
      parameter:
        """
{"parameter":{"filter":{"event":{"query":{"must":[{"code":"event_type","operator":"in","values":[20001]},{"values":[],"query":{"should":[{"values":[],"query":{"must":[{"code":"event_type","operator":"equals","values":[20001]}]}}]}}]}}},"measures":[{"event_type":20001,"measure":"last_day","alias":"day_20001","group":true,"range":[{"alias":"90天以下","filter":{"query":{"must":[{"code":"measure","operator":"lessthan","values":[90]}]}}},{"alias":"90~180天","filter":{"query":{"must":[{"code":"measure","operator":"greaterthanorequals","values":[90]},{"code":"measure","operator":"lessthan","values":[180]}]}}},{"alias":"180~210天","filter":{"query":{"must":[{"code":"measure","operator":"greaterthanorequals","values":[180]},{"code":"measure","operator":"lessthan","values":[210]}]}}},{"alias":"210天以上","filter":{"query":{"must":[{"code":"measure","operator":"greaterthanorequals","values":[210]}]}}}]}],"dimensions":{"user":[],"event":[{"field":"projectID","alias":"dimension"}]},"projectid":1,"time_range":[["2017-01-24","2017-07-23"]],"category":"user","measure_type":"default","unit_measure":"1","is_extend":false,"is_any":false},"model":"scatter"}
        """
      mql:
        """
SELECT dimension,total,measure,person_number,cast(person_number/total as decimal(38,4))rate FROM(SELECT dimension,measure,pn person_number,sum(pn)OVER(PARTITION BY dimension)total FROM(SELECT dimension,COUNT(*)pn,CASE WHEN (measure_per_unit<90) THEN '90天以下' WHEN (measure_per_unit<180 AND measure_per_unit>=90) THEN '90~180天' WHEN (measure_per_unit<210 AND measure_per_unit>=180) THEN '180~210天' WHEN (measure_per_unit>=210) THEN '210天以上' END measure FROM(SELECT mallcoo_id,dimension,round(day_20001/1)measure_per_unit FROM(SELECT mallcoo_id,IF(projectID IS NULL OR trim(cast(projectID AS STRING))='', '未知',cast(projectID AS STRING)) dimension,datediff(now(),max(day)) day_20001 FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2017-01-24','MM')) AND to_date(trunc('2017-07-23','MM')) AND day BETWEEN '2017-01-24' AND '2017-07-23')AND(((event_type=20001)) AND event_type IN (20001))GROUP BY mallcoo_id,dimension)m)n GROUP BY dimension,measure)v)z WHERE measure<>'0';
        """
    }
  }
  user_analytics {
    按省、性别分组查看会员卡号有值的会员积分总和TOP10 {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "user": {
        "Query": {
          "Must": [
            {
              "Code": "_membercard_id",
              "Operator": "hasvaluewithoutempty",
              "Values": []
            }
          ]
        }
      }
    },
    "expressions": [
      {
        "expression": "measure",
        "alias": "measure"
      }
    ],
    "measures": [
      {
        "measure": "sum",
        "field": "_membercard_bonus",
        "alias": "measure"
      }
    ],
    "dimensions" : {
      "user":[
        {
          "field": "_gender",
          "alias": "_gender_dim"
        },
        {
          "field": "_province",
          "alias": "_province_dim"
        }
      ]
    },
    "projectid": 1,
    "category" : "user",
    "pages": {
      "order": "measure",
      "direction": "asc",
      "size": 10,
      "start": 0
    }
  },
  "model": "user_analytics",
  "transform": {}
}
        """
      mql:
        """
SELECT COALESCE(measure,0) measure,_gender_dim,_province_dim FROM(SELECT COALESCE(sum(_membercard_bonus),0) measure,IF(_gender IS NULL OR trim(cast(_gender AS STRING))='', '未知',cast(_gender AS STRING)) _gender_dim,IF(_province IS NULL OR trim(cast(_province AS STRING))='', '未知',cast(_province AS STRING)) _province_dim FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '1-' AND '1-z' AND distinct_id=mallcoo_id AND ((_membercard_id IS NOT NULL AND trim(cast(_membercard_id AS STRING))<>''))GROUP BY _gender_dim,_province_dim)x ORDER BY measure asc LIMIT 10 OFFSET 0;
        """
    }
  }
  association {
    按关联属性过滤 {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "all": {
        "Query": {
          "Must": [
            {
              "Query": {
                "Must": [
                  {
                    "Code": "membercard_no",
                    "Operator": "hasvaluewithoutempty",
                    "Values": [ ]
                  }
                ]
              }
            },
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 25001 ]
            }

          ]
        }
      }
    },
    "item": {
      "field": "shopname",
      "rule": {
        "Query": {
          "Must": [
            {
              "Code": "shopname",
              "Operator": "equals",
              "Values": [ "4 in look" ]
            }
          ]
        }
      },
      "filter": {
        "event": {
          "Query": {
            "Must": [
              {
                "Code": "shopname",
                "Operator": "in",
                "Values": [ "jins","face-face","Ms.flora","HUSH" ]
              }
            ]
          }
        }
      }
    },
    "projectid": 1,
    "category" : "user",
    "time_range": [["2017-01-01","2017-06-12"]],
    "is_extend" : false,
    "is_any": false
  },
  "model": "association",
  "transform": {}
}
        """
      mql:
        """
SELECT Itemset,COALESCE(cast(SupportCount/total as decimal(38,4)),0)Support,COALESCE(cast(SupportCount/SupportCountB as decimal(38,4)),0)ReverseConfidence,COALESCE(cast(SupportCount/num as decimal(38,4)),0)Confidence,COALESCE(SupportCount,0)SupportCount,COALESCE(cast((SupportCount/num)/(SupportCountB/total)as decimal(38,4)),0)Lift FROM(SELECT count(mallcoo_id)total,sum(item_sc)num FROM(SELECT mallcoo_id,max(if((IF(shopname IS NULL OR trim(cast(shopname AS STRING))='', '未知',cast(shopname AS STRING))='4 in look'),1,0))item_sc FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2017-01-01','MM')) AND to_date(trunc('2017-06-12','MM')) AND day BETWEEN '2017-01-01' AND '2017-06-12')AND(event_type=25001 AND ((membercard_no IS NOT NULL AND trim(cast(membercard_no AS STRING))<>'')))GROUP BY mallcoo_id)t)a CROSS JOIN(SELECT Itemset,sum(num)SupportCountB,sum(hadBeen_count)SupportCount FROM(SELECT Itemset,COUNT(DISTINCT mallcoo_id)num,if(hadBeen=1,COUNT(DISTINCT mallcoo_id),null)hadBeen_count FROM(SELECT mallcoo_id,max(if((IF(shopname IS NULL OR trim(cast(shopname AS STRING))='', '未知',cast(shopname AS STRING))='4 in look'),1,0))OVER(PARTITION BY mallcoo_id)hadBeen,IF(shopname IS NULL OR trim(cast(shopname AS STRING))='', '未知',cast(shopname AS STRING))Itemset FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2017-01-01','MM')) AND to_date(trunc('2017-06-12','MM')) AND day BETWEEN '2017-01-01' AND '2017-06-12')AND(event_type=25001 AND ((membercard_no IS NOT NULL AND trim(cast(membercard_no AS STRING))<>''))))x GROUP BY Itemset,hadBeen)b GROUP BY Itemset)c WHERE(Itemset IN ('jins','face-face','Ms.flora','HUSH'));
        """
    }
  }
  retention {
    按初始事件属性分组多条件过滤8周留存 {
      parameter:
        """
{
  "parameter": {
    "user_filter": {
      "Query": {
        "Must": [
          {
            "Code": "_membercard_bonus",
            "Operator": "greaterthan",
            "Values": [ 1 ]
          }
        ]
      }
    },
    "first_event_filter": {
      "Query": {
        "Must": [
          {
            "Query": {
              "Must": [
                {
                  "Code": "bonus",
                  "Operator": "hasvaluewithoutempty",
                  "Values": []
                }
              ]
            }
          },
          {
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25001 ]
          }
        ]
      }
    },
    "second_event_filter": {
      "Query": {
        "Must": [
          {
            "Query": {
              "Must": [
                {
                  "Code": "membercard_no",
                  "Operator": "hasvaluewithoutempty",
                  "Values": []
                }
              ]
            }
          },
          {
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25007 ]
          }
        ]
      }
    },
    "duration": 8,
    "unit_days": "week",
    "dimensions" : {
      "event":[
        {
          "field": "mallname",
          "alias" : "mallname_dim"
        }
      ]
    },
    "dimension_type":"first_event",
    "projectid": 14,
    "time_range": [["2017-05-14","2017-06-12"]],
    "category" : "user"
  },
  "model": "retention",
  "transform": {}
}
        """
      mql:
        """
SELECT total.dimension,COALESCE(retention.duration,0)duration,COALESCE(total.person_number,0)total,COALESCE(retention.person_number,0)person_number,COALESCE(cast(retention.person_number/total.person_number as decimal(38,4)),0.0)rate FROM(SELECT t.dimension,count(t.mallcoo_id)person_number FROM(SELECT mallcoo_id,sum(if((month BETWEEN to_date(trunc('2017-05-14','MM')) AND to_date(trunc('2017-06-12','MM')) AND day BETWEEN '2017-05-14' AND '2017-06-12')AND(event_type=25001 AND ((bonus IS NOT NULL AND trim(cast(bonus AS STRING))<>''))),1,0))type,COALESCE(max(IF(mallname IS NULL OR trim(cast(mallname AS STRING))='',NULL,cast(mallname AS STRING))), '未知')dimension FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(day BETWEEN '2017-05-14' AND weeks_add('2017-06-12',8))AND((event_type=25001 AND ((bonus IS NOT NULL AND trim(cast(bonus AS STRING))<>'')))OR(event_type=25007 AND ((membercard_no IS NOT NULL AND trim(cast(membercard_no AS STRING))<>''))))AND(_membercard_bonus>1)GROUP BY mallcoo_id HAVING type>0)t GROUP BY t.dimension)total LEFT JOIN(SELECT ceil(datediff(second_event.time,first_event.time)/7)duration,first_event.dimension dimension,count(DISTINCT first_event.mallcoo_id)person_number FROM(SELECT time,mallcoo_id,COALESCE(MAX(IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING))) OVER(PARTITION BY mallcoo_id),'未知') dimension FROM(SELECT to_date(date_sub(day,dayofweek(date_sub(day,1))-1))time,mallcoo_id,MAX(mallname) _dim FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(month BETWEEN to_date(trunc('2017-05-14','MM')) AND to_date(trunc('2017-06-12','MM')) AND day BETWEEN '2017-05-14' AND '2017-06-12')AND(event_type=25001 AND ((bonus IS NOT NULL AND trim(cast(bonus AS STRING))<>'')))AND(_membercard_bonus>1)GROUP BY mallcoo_id,time)x)first_event JOIN(SELECT time,mallcoo_id,COALESCE(MAX(IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING))) OVER(PARTITION BY mallcoo_id),'未知') dimension FROM(SELECT to_date(date_sub(day,dayofweek(date_sub(day,1))-1))time,mallcoo_id,MAX(mallname) _dim FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(day BETWEEN '2017-05-14' AND weeks_add('2017-06-12',8))AND(event_type=25007 AND ((membercard_no IS NOT NULL AND trim(cast(membercard_no AS STRING))<>'')))AND(_membercard_bonus>1)GROUP BY mallcoo_id,time)x)second_event ON first_event.mallcoo_id=second_event.mallcoo_id WHERE first_event.time<=second_event.time GROUP BY duration,first_event.dimension HAVING duration<8)retention ON total.dimension=retention.dimension;
        """
    }
  }
  funnel {
    三步漏斗 {
      parameter:
        """
  {
  "parameter": {
    "steps" : [
      {
        "Query": {
          "Must": [
            {
              "Query": {
                "Must": [
                  {
                    "Code": "page_name",
                    "Operator": "equals",
                    "Values": [ "团购-团购详情" ]
                  }
                ]
              }
            },
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 13001 ]
            }
          ]
        }
      },
      {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 20001 ]
            }
          ]
        }
      },
      {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 20002 ]
            }
          ]
        }
      }
    ],
    "dimensions" : {
      "event":[
        {
          "event_type": 13001,
          "field": "event_source"
        }
      ]
    },
    "window_length":2592000,
    "projectid": 10,
    "time_range": [["2016-12-14","2017-06-13"]],
    "category" : "user",
    "is_extend" : false,
    "is_any": false
  },
  "model": "funnel",
  "transform": {}
}
        """
      mql:
        """
SELECT step,count(DISTINCT mallcoo_id)step_count,dimension FROM(SELECT mallcoo_id,cast(udf.funnel(action,ts,"1,2,3",2592000)AS INT)step,COALESCE(max(IF(event_type=13001,IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING)),NULL)),'未知') dimension FROM(SELECT mallcoo_id,ts,event_type,CASE WHEN (event_type=13001 AND (page_name='团购-团购详情')) THEN 1 WHEN (event_type=20001) THEN 2 WHEN (event_type=20002) THEN 3 END action,IF(event_source IS NULL OR trim(cast(event_source AS STRING))='', '未知',cast(event_source AS STRING)) _dim FROM medusa.kudu_event WHERE id BETWEEN '10-' AND '10-z' AND projectid='10' AND(month BETWEEN to_date(trunc('2016-12-14','MM')) AND to_date(trunc('2017-06-13','MM')) AND day BETWEEN '2016-12-14' AND '2017-06-13')AND((event_type=13001 AND (page_name='团购-团购详情'))OR(event_type=20001)OR(event_type=20002)))f WHERE action>0 GROUP BY mallcoo_id)s WHERE step>0 GROUP BY step,dimension;
        """
    }
  }

  user_list: {
    scatter: {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "all": {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 20001 ]
            }
          ]
        }
      }
    },
    "measures": [
      {
        "event_type": 20001,
        "measure": "totalcount",
        "alias":"totalcount",
        "range": [
          {
            "alias" : "2次以下",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 2 ]
                }]
              }
            }
          },
          {
            "alias" : "2~3次",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 2 ]
                },{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 3 ]
                }]
              }
            }
          },
          {
            "alias" : "3~5次",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 3 ]
                },{
                  "Code": "measure",
                  "Operator": "lessthan",
                  "Values": [ 5 ]
                }]
              }
            }
          },
          {
            "alias" : "5次以上",
            "filter": {
              "Query": {
                "Must": [{
                  "Code": "measure",
                  "Operator": "greaterthanorequals",
                  "Values": [ 5 ]
                }]
              }
            }
          }
        ],
        "filter": {
          "Query": {
            "Must": [{
              "Code": "measure",
              "Operator": "lessthan",
              "Values": [ 2 ]
            }]
          }
        }
      }
    ],
    "dimensions" : {
      "event":[
        {
          "field": "time",
          "preset" : "day",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "time",
                  "Operator": "equals",
                  "Values": [ "2017-05-30" ]
                }
              ]
            }
          }
        }
      ]
    },
    "projectid": 14,
    "unit_measure": "1",
    "time_range": [["2017-05-28","2017-06-11"]],
    "category" : "user",
    "measure_type":"default",
    "uniqueid":"51BBD3794B9A42B5B8C4BEBD19A552C8",
    "model": "scatter",
  },
  "model": "user_list",
  "compress": true,
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'51BBD3794B9A42B5B8C4BEBD19A552C8')FROM medusa.kudu_user x,(SELECT mallcoo_id,round(totalcount/1) totalcount FROM(SELECT mallcoo_id,COALESCE(count(CASE WHEN event_type=20001 THEN id END),0) totalcount FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(month BETWEEN to_date(trunc('2017-05-28','MM')) AND to_date(trunc('2017-06-11','MM')) AND day BETWEEN '2017-05-28' AND '2017-06-11')AND(event_type=20001)AND (IF(day IS NULL OR trim(cast(day AS STRING))='', '未知',cast(day AS STRING))='2017-05-30')GROUP BY mallcoo_id)x HAVING (totalcount<2))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '14-' AND '14-z' AND udf.has(_tag_temp,'51BBD3794B9A42B5B8C4BEBD19A552C8')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    scatter_预分组自定义指标: {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "event": {
        "query": {
          "must": [
            {
              "code": "event_type",
              "operator": "in",
              "values": [25001, 25001]
            },
            {
              "values": [],
              "query": {
                "should": [
                  {
                    "values": [],
                    "query": {
                      "must": [
                        {
                          "code": "event_type",
                          "operator": "equals",
                          "values": [25001 ]
                        }
                      ]
                    }
                  },
                  {
                    "values": [],
                    "query": {
                      "must": [
                        {
                          "code": "event_type",
                          "operator": "equals",
                          "values": [25001 ]
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "measures": [
      {
        "event_type": 25001,
        "measure": "sum",
        "field": "payment_amount",
        "alias": "payment_amount_sum_25001",
        "group": true
      },
      {
        "event_type": 25001,
        "measure": "day_count",
        "alias": "day_count_25001",
        "group": true
      }
    ],
    "expressions": [
      {
        "expression": "avg(payment_amount_sum_25001/day_count_25001)",
        "alias": "customMeasure45",
        "format": "double",
        "range": [
            {
              "alias": "10以下",
              "filter": {
                "query": {
                  "must": [
                    {
                      "code": "measure",
                      "operator": "lessthan",
                      "values": [10 ]
                    }
                  ]
                }
              }
            },
            {
              "alias": "10~30",
              "filter": {
                "query": {
                  "must": [
                    {
                        "code": "measure",
                        "operator": "greaterthanorequals",
                        "values": [10 ]
                    },
                    {
                      "code": "measure",
                      "operator": "lessthan",
                      "values": [30 ]
                    }
                  ]
                }
              }
            },
            {
              "alias": "30~50",
              "filter": {
                "query": {
                  "must": [
                    {
                      "code": "measure",
                      "operator": "greaterthanorequals",
                      "values": [30 ]
                    },
                    {
                      "code": "measure",
                      "operator": "lessthan",
                      "values": [50 ]
                    }
                  ]
                }
              }
            },
            {
                "alias": "50~100",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    50
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    100
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "100~200",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    100
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    200
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "200~500",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    200
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    500
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "500~1000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    500
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    1000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "1000~5000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    1000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    5000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "5000~10000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    5000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    10000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "10000~50000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    10000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    50000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "50000~100000",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    50000
                                ]
                            },
                            {
                                "code": "measure",
                                "operator": "lessthan",
                                "values": [
                                    100000
                                ]
                            }
                        ]
                    }
                }
            },
            {
                "alias": "100000以上",
                "filter": {
                    "query": {
                        "must": [
                            {
                                "code": "measure",
                                "operator": "greaterthanorequals",
                                "values": [
                                    100000
                                ]
                            }
                        ]
                    }
                }
            }
        ],
        "filter":{
          "query":{
            "must":[
              {
                "code":"measure",
                "operator":"greaterthanorequals",
                "values":[1000]
              },
              {
                "code":"measure",
                "operator":"lessthan",
                "values":[5000]
              }
            ]
          }
        },
        "limits": [
           {
             "expression":"payment_amount_sum_25001/day_count_25001",
             "start": 1,
             "end": 1000,
             "format": "double"
           }
        ]
      }
    ],
    "dimensions": {
      "user": [],
      "event": [
        {
          "field": "projectID",
          "alias": "dimension",
          "filter":{
            "query":{
              "must":[{
                "code":"dimension",
                "operator":"equals",
                "values":["1"]
              }]
            }
          }
        }
      ]
    },
    "projectid": 1,
    "time_range": [["2016-06-01", "2016-06-30"]],
    "category": "user",
    "measure_type": "default",
    "unit_measure": "1",
    "period":"day",
    "is_extend": false,
    "is_any": false,
    "uniqueid":"ccb2ff8aab74444db14409f1eba5d174",
    "model":"scatter"
  },
  "model": "user_list"
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'ccb2ff8aab74444db14409f1eba5d174')FROM medusa.kudu_user x,(SELECT mallcoo_id,round(COALESCE(cast(avg(udf.to_num(payment_amount_sum_25001/day_count_25001)) as decimal(38,2)),0)/1) customMeasure45 FROM(SELECT mallcoo_id,COALESCE(sum(CASE WHEN event_type=25001 THEN payment_amount END),0) payment_amount_sum_25001,COALESCE(ndv(CASE WHEN event_type=25001 THEN day END),0) day_count_25001,day period FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2016-06-01','MM')) AND to_date(trunc('2016-06-30','MM')) AND day BETWEEN '2016-06-01' AND '2016-06-30')AND(((event_type=25001) OR (event_type=25001)) AND event_type IN (25001,25001))AND (IF(projectID IS NULL OR trim(cast(projectID AS STRING))='', '未知',cast(projectID AS STRING))='1')GROUP BY mallcoo_id,period HAVING (udf.to_num(payment_amount_sum_25001/day_count_25001) IS NULL OR (udf.to_num(payment_amount_sum_25001/day_count_25001) IS NOT NULL AND udf.to_num(payment_amount_sum_25001/day_count_25001)>=1 AND udf.to_num(payment_amount_sum_25001/day_count_25001)<=1000)))x GROUP BY mallcoo_id HAVING (customMeasure45<5000 AND customMeasure45>=1000))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '1-' AND '1-z' AND udf.has(_tag_temp,'ccb2ff8aab74444db14409f1eba5d174')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    scatter_最后时间距今几天: {
      parameter:
        """
{"parameter":{"filter":{"event":{"query":{"must":[{"code":"event_type","operator":"in","values":[20001]},{"values":[],"query":{"should":[{"values":[],"query":{"must":[{"code":"event_type","operator":"equals","values":[20001]}]}}]}}]}}},"measures":[{"event_type":20001,"measure":"last_day","alias":"day_20001","group":true,"range":[{"alias":"90天以下","filter":{"query":{"must":[{"code":"measure","operator":"lessthan","values":[90]}]}}},{"alias":"90~180天","filter":{"query":{"must":[{"code":"measure","operator":"greaterthanorequals","values":[90]},{"code":"measure","operator":"lessthan","values":[180]}]}}},{"alias":"180~210天","filter":{"query":{"must":[{"code":"measure","operator":"greaterthanorequals","values":[180]},{"code":"measure","operator":"lessthan","values":[210]}]}}},{"alias":"210天以上","filter":{"query":{"must":[{"code":"measure","operator":"greaterthanorequals","values":[210]}]}}}],"filter":{"query":{"must":[{"code":"measure","operator":"lessthan","values":[90]}]}}}],"dimensions":{"user":[],"event":[{"field":"projectID","alias":"dimension","filter":{"query":{"must":[{"code":"dimension","operator":"equals","values":["1"]}]}}}]},"projectid":1,"time_range":[["2017-01-24","2017-07-23"]],"category":"user","measure_type":"default","unit_measure":"1","is_extend":false,"is_any":false,"uniqueid":"439b324849974844b45f053b15e746ed","model":"scatter"},"model":"user_list"}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'439b324849974844b45f053b15e746ed')FROM medusa.kudu_user x,(SELECT mallcoo_id,round(day_20001/1) day_20001 FROM(SELECT mallcoo_id,datediff(now(),max(day)) day_20001 FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2017-01-24','MM')) AND to_date(trunc('2017-07-23','MM')) AND day BETWEEN '2017-01-24' AND '2017-07-23')AND(((event_type=20001)) AND event_type IN (20001))AND (IF(projectID IS NULL OR trim(cast(projectID AS STRING))='', '未知',cast(projectID AS STRING))='1')GROUP BY mallcoo_id)x HAVING (day_20001<90))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '1-' AND '1-z' AND udf.has(_tag_temp,'439b324849974844b45f053b15e746ed')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    user_analytics {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "user": {
        "Query": {
          "Must": [
            {
              "Code": "_membercard_id",
              "Operator": "hasvaluewithoutempty",
              "Values": []
            }
          ]
        }
      }
    },
    "dimensions" : {
      "user":[
        {
          "field": "_gender",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "_gender",
                  "Operator": "equals",
                  "Values": [ "女" ]
                }
              ]
            }
          }
        },
        {
          "field": "_province",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "_province",
                  "Operator": "equals",
                  "Values": [ "西藏自治区" ]
                }
              ]
            }
          }
        }
      ]
    },
    "projectid": 1,
    "category" : "user",
    "uniqueid":"51BBD3794B9A42B5B8C4BEBD19A662C9",
    "model": "user_analytics",
  },
  "model": "user_list",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'51BBD3794B9A42B5B8C4BEBD19A662C9')FROM medusa.kudu_user x,(SELECT mallcoo_id FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '1-' AND '1-z' AND distinct_id=mallcoo_id AND ((_membercard_id IS NOT NULL AND trim(cast(_membercard_id AS STRING))<>''))AND (IF(_gender IS NULL OR trim(cast(_gender AS STRING))='', '未知',cast(_gender AS STRING))='女') AND (IF(_province IS NULL OR trim(cast(_province AS STRING))='', '未知',cast(_province AS STRING))='西藏自治区'))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '1-' AND '1-z' AND udf.has(_tag_temp,'51BBD3794B9A42B5B8C4BEBD19A662C9')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    association {
      parameter:
        """
{
  "parameter": {
    "filter": {
      "all": {
        "Query": {
          "Must": [
            {
              "Query": {
                "Must": [
                  {
                    "Code": "membercard_no",
                    "Operator": "hasvaluewithoutempty",
                    "Values": [ ]
                  }
                ]
              }
            },
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 25001 ]
            }
          ]
        }
      }
    },
    "item": {
      "field": "shopname",
      "rule": {
        "Query": {
          "Must": [
            {
              "Code": "shopname",
              "Operator": "equals",
              "Values": [ "4 in look" ]
            }
          ]
        }
      },
      "filter" : {
        "event": {
          "Query": {
            "Must": [
              {
                "Code": "shopname",
                "Operator": "equals",
                "Values": [ "face-face" ]
              }
            ]
          }
        }
      }
    },
    "projectid": 1,
    "category" : "user",
    "time_range": [["2017-01-01","2017-06-12"]],
    "is_extend" : false,
    "is_any": false,
    "uniqueid":"000001",
    "model": "association"
  },
  "model": "user_list",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'000001')FROM medusa.kudu_user x,(SELECT mallcoo_id FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2017-01-01','MM')) AND to_date(trunc('2017-06-12','MM')) AND day BETWEEN '2017-01-01' AND '2017-06-12')AND(event_type=25001 AND ((membercard_no IS NOT NULL AND trim(cast(membercard_no AS STRING))<>'')))GROUP BY mallcoo_id HAVING max(if((IF(shopname IS NULL OR trim(cast(shopname AS STRING))='', NULL,cast(shopname AS STRING))='4 in look'),1,0))=1 AND max(if((IF(shopname IS NULL OR trim(cast(shopname AS STRING))='', '未知',cast(shopname AS STRING))='face-face'),1,0))=1)y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '1-' AND '1-z' AND udf.has(_tag_temp,'000001')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    retention: {
      parameter:
        """
{
  "parameter": {
    "user_filter": {
      "Query": {
        "Must": [
          {
            "Code": "_membercard_bonus",
            "Operator": "greaterthan",
            "Values": [ 1 ]
          }
        ]
      }
    },
    "first_event_filter": {
      "Query": {
        "Must": [
          {
            "Query": {
              "Must": [
                {
                  "Code": "bonus",
                  "Operator": "hasvaluewithoutempty",
                  "Values": []
                }
              ]
            }
          },
          {
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25001 ]
          }
        ]
      }
    },
    "second_event_filter": {
      "Query": {
        "Must": [
          {
            "Query": {
              "Must": [
                {
                  "Code": "membercard_no",
                  "Operator": "hasvaluewithoutempty",
                  "Values": []
                }
              ]
            }
          },
          {
            "Code": "event_type",
            "Operator": "equals",
            "Values": [ 25007 ]
          }
        ]
      }
    },
    "dimensions" : {
      "event":[
        {
          "field": "mallname",
          "alias" : "mallname_dim",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "mallname",
                  "Operator": "equals",
                  "Values": [ "日照华润万象汇" ]
                }
              ]
            }
          }
        }
      ]
    },
    "duration": 8,
    "duration_filter": {
      "Query": {
        "Must": [{
          "Code": "duration",
          "Operator": "equals",
          "Values": [ 0 ]
        }]
      }
    },
    "unit_days": "week",
    "dimension_type":"first_event",
    "projectid": 14,
    "time_range": [["2017-05-14","2017-06-12"]],
    "category" : "user",
    "uniqueid":"00003",
    "model": "retention"
  },
  "model": "user_list",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'00003')FROM medusa.kudu_user x,(SELECT DISTINCT first_event.mallcoo_id FROM(SELECT mallcoo_id,to_date(date_sub(day,dayofweek(date_sub(day,1))-1))time,COALESCE(MAX(IF(mallname IS NULL OR trim(cast(mallname AS STRING))='',NULL,cast(mallname AS STRING))) OVER(PARTITION BY mallcoo_id),'未知') dimension FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(month BETWEEN to_date(trunc('2017-05-14','MM')) AND to_date(trunc('2017-06-12','MM')) AND day BETWEEN '2017-05-14' AND '2017-06-12')AND(event_type=25001 AND ((bonus IS NOT NULL AND trim(cast(bonus AS STRING))<>'')))AND(_membercard_bonus>1))first_event LEFT JOIN(SELECT mallcoo_id,to_date(date_sub(day,dayofweek(date_sub(day,1))-1))time,COALESCE(MAX(IF(mallname IS NULL OR trim(cast(mallname AS STRING))='',NULL,cast(mallname AS STRING))) OVER(PARTITION BY mallcoo_id),'未知') dimension FROM medusa.kudu_event WHERE id BETWEEN '14-' AND '14-z' AND projectid='14' AND(day BETWEEN '2017-05-14' AND weeks_add('2017-06-12',8))AND(event_type=25007 AND ((membercard_no IS NOT NULL AND trim(cast(membercard_no AS STRING))<>'')))AND(_membercard_bonus>1))second_event ON first_event.mallcoo_id=second_event.mallcoo_id WHERE(ceil(datediff(second_event.time,first_event.time)/7)=0)AND first_event.time<=second_event.time AND(first_event.dimension='日照华润万象汇'))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '14-' AND '14-z' AND udf.has(_tag_temp,'00003')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    funnel: {
      parameter:
        """
{
  "parameter": {
    "steps" : [
      {
        "Query": {
          "Must": [
            {
              "Query": {
                "Must": [
                  {
                    "Code": "page_name",
                    "Operator": "equals",
                    "Values": [ "团购-团购详情" ]
                  }
                ]
              }
            },
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 13001 ]
            }
          ]
        }
      },
      {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 20001 ]
            }
          ]
        }
      },
      {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 20002 ]
            }
          ]
        }
      }
    ],
    "dimensions" : {
      "event":[
        {
          "event_type": 13001,
          "field": "event_source",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "event_source",
                  "Operator": "equals",
                  "Values": [ "微信" ]
                }
              ]
            }
          }
        }
      ]
    },
    "step_num" : 2,
    "step_type":"conversion",
    "window_length":2592000,
    "projectid": 10,
    "time_range": [["2016-12-14","2017-06-13"]],
    "category" : "user",
    "is_extend" : false,
    "is_any": false,
    "uniqueid":"00004",
    "model": "funnel"
  },
  "model": "user_list",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'00004')FROM medusa.kudu_user x,(SELECT mallcoo_id,cast(udf.funnel(action,ts,"1,2,3",2592000)AS INT)step,COALESCE(max(IF(event_type=13001,IF(_dim IS NULL OR trim(cast(_dim AS STRING))='',NULL,cast(_dim AS STRING)),NULL)),'未知') dimension FROM(SELECT mallcoo_id,ts,event_type,CASE WHEN (event_type=13001 AND (page_name='团购-团购详情')) THEN 1 WHEN (event_type=20001) THEN 2 WHEN (event_type=20002) THEN 3 END action,IF(event_source IS NULL OR trim(cast(event_source AS STRING))='', '未知',cast(event_source AS STRING)) _dim FROM medusa.kudu_event WHERE id BETWEEN '10-' AND '10-z' AND projectid='10' AND(month BETWEEN to_date(trunc('2016-12-14','MM')) AND to_date(trunc('2017-06-13','MM')) AND day BETWEEN '2016-12-14' AND '2017-06-13')AND((event_type=13001 AND (page_name='团购-团购详情'))OR(event_type=20001)OR(event_type=20002)))f WHERE action>0 GROUP BY mallcoo_id HAVING step>=2 AND(dimension='微信'))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    segmentation: {
      parameter:
        """
{
  "parameter": {
    "time_range": [["2016-06-01","2016-07-01"]],
    "projectid": 10,
    "filter": {
      "event": {
        "Query": {
          "Must": [
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 25001 ]
            }
          ]
        }
      }
    },
    "dimensions": {
      "event":[
        {
          "event_type": 25001,
          "field": "payment_amount",
          "alias": "payment_amount_dim",
          "range": [
            {
              "alias" : "10以下",
              "filter": {
                "Query": {
                  "Must": [{
                      "Code": "payment_amount",
                      "Operator": "lessthan",
                      "Values": [ 10 ]
                  }]
                }
              }
            },
            {
              "alias" : "10~20",
              "filter": {
                "Query": {
                  "Must": [{
                    "Code": "payment_amount",
                    "Operator": "greaterthanorequals",
                    "Values": [ 10 ]
                  },{
                    "Code": "payment_amount",
                    "Operator": "lessthan",
                    "Values": [ 20 ]
                  }]
                }
              }
            },
            {
              "alias" : "20~100",
              "filter": {
                "Query": {
                  "Must": [{
                    "Code": "payment_amount",
                    "Operator": "greaterthanorequals",
                    "Values": [ 20 ]
                  },{
                    "Code": "payment_amount",
                    "Operator": "lessthan",
                    "Values": [ 100 ]
                  }]
                }
              }
            },
            {
              "alias" : "100以上",
              "filter": {
                "Query": {
                  "Must": [{
                    "Code": "payment_amount",
                    "Operator": "greaterthanorequals",
                    "Values": [ 100 ]
                  }]
                }
              }
            }
          ],
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "payment_amount",
                  "Operator": "equals",
                  "Values": [ "10~20" ]
                }
              ]
            }
          }
        },
        {
          "field": "time",
          "alias": "time_dim",
          "preset" : "day",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "time",
                  "Operator": "equals",
                  "Values": [ "2016-06-01" ]
                }
              ]
            }
          }
        }
      ],
      "user":[
        {
          "field": "_gender",
          "alias": "_gender_dim",
          "filter": {
            "Query": {
              "Must": [
                {
                  "Code": "_gender",
                  "Operator": "equals",
                  "Values": [ "男" ]
                }
              ]
            }
          }
        }
      ]
    },
    "category" : "user",
    "uniqueid":"00005",
    "model": "segmentation"
  },
  "model": "user_list",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag_temp=udf.append(x._tag_temp,'00005')FROM medusa.kudu_user x,(SELECT DISTINCT mallcoo_id FROM medusa.kudu_event WHERE id BETWEEN '10-' AND '10-z' AND projectid='10' AND(month BETWEEN to_date(trunc('2016-06-01','MM')) AND to_date(trunc('2016-07-01','MM')) AND day BETWEEN '2016-06-01' AND '2016-07-01')AND(event_type=25001)AND (IF(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END IS NULL OR trim(cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING))='', '未知',cast(CASE WHEN (payment_amount<10) THEN '10以下' WHEN (payment_amount<20 AND payment_amount>=10) THEN '10~20' WHEN (payment_amount<100 AND payment_amount>=20) THEN '20~100' WHEN (payment_amount>=100) THEN '100以上' END AS STRING))='10~20') AND (IF(day IS NULL OR trim(cast(day AS STRING))='', '未知',cast(day AS STRING))='2016-06-01') AND (IF(_gender IS NULL OR trim(cast(_gender AS STRING))='', '未知',cast(_gender AS STRING))='男'))y WHERE x.mallcoo_id=y.mallcoo_id;
SELECT mallcoo_id,idlist,_name,_gender,_birthday,_mobile_brand,_mobile_os,_register_time,_loc_first_time FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00005')IS NOT NULL AND mallcoo_id=distinct_id LIMIT 1000;
        """
    }
    export: {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "shop",
    "uniqueid":"00004",
    "model": "export"
  },
  "model": "user_list",
  "transform": {}
}
        """
      mql:
        """
SELECT mallcoo_id,idlist,_shop_name,_floor_name,_shop_area,_commercial_type,_sub_commercial_type,_settled_time FROM medusa_shop.kudu_current_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND mallcoo_id=distinct_id;
        """
    }
  }

  user_list_properties {
    user {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "user",
    "uniqueid":"00004",
    "type": "user"
  },
  "model": "user_list_properties",
  "transform": {}
}
        """
      mql:
        """
SELECT CASE WHEN year(now())-year(_birthday)<=18 THEN '18岁以下' WHEN year(now())-year(_birthday)BETWEEN 19 AND 25 THEN '19~25岁' WHEN year(now())-year(_birthday)BETWEEN 26 AND 30 THEN '26~30岁' WHEN year(now())-year(_birthday)BETWEEN 31 AND 35 THEN '31~35岁' WHEN year(now())-year(_birthday)BETWEEN 36 AND 40 THEN '36~40岁' WHEN year(now())-year(_birthday)BETWEEN 41 AND 45 THEN '41~45岁' WHEN year(now())-year(_birthday)BETWEEN 46 AND 50 THEN '46~50岁' WHEN year(now())-year(_birthday)BETWEEN 51 AND 60 THEN '51~60岁' WHEN year(now())-year(_birthday)> 60 THEN '60岁以上' ELSE '未知' END property,count(DISTINCT mallcoo_id)COUNT,1 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT IF(_gender IS NULL OR trim(_gender)='','未知',_gender)property,count(DISTINCT mallcoo_id)COUNT,2 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT IF(_register_source IS NULL OR trim(_register_source)='','未知',_register_source)property,count(DISTINCT mallcoo_id)COUNT,3 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT if(_hascar,'有车','无车')property,count(DISTINCT mallcoo_id)COUNT,4 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT IF(_membercard IS NULL OR trim(_membercard)='','未知',_membercard)property,count(DISTINCT mallcoo_id)COUNT,5 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT CASE WHEN datediff(now(),_register_time)<30 THEN '30天内' WHEN datediff(now(),_register_time)BETWEEN 30 AND 59 THEN '30-60天内' WHEN datediff(now(),_register_time)BETWEEN 60 AND 89 THEN '60-90天内' WHEN datediff(now(),_register_time)BETWEEN 90 AND 179 THEN '90-180天内' WHEN datediff(now(),_register_time)BETWEEN 180 AND 359 THEN '180-360天内' WHEN datediff(now(),_register_time)>=360 THEN '360天以上' ELSE '未知' END property,count(DISTINCT mallcoo_id)COUNT,6 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT '微信渠道' property,count(DISTINCT mallcoo_id)COUNT,7 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND _openid IS NOT NULL UNION ALL SELECT '短信渠道' property,count(DISTINCT mallcoo_id)COUNT,7 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND _mobile IS NOT NULL UNION ALL SELECT 'APP渠道' property,count(DISTINCT mallcoo_id)COUNT,7 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND _register_source IN('iOS','ANDroid')UNION ALL SELECT '未知渠道' property,count(DISTINCT mallcoo_id)COUNT,7 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND _register_source NOT IN('iOS','ANDroid')AND _mobile IS NULL AND _openid IS NULL UNION ALL SELECT CASE WHEN datediff(now(),_loc_first_time)<30 THEN '30天内' WHEN datediff(now(),_loc_first_time)BETWEEN 30 AND 59 THEN '30-60天内' WHEN datediff(now(),_loc_first_time)BETWEEN 60 AND 89 THEN '60-90天内' WHEN datediff(now(),_loc_first_time)BETWEEN 90 AND 179 THEN '90-180天内' WHEN datediff(now(),_loc_first_time)BETWEEN 180 AND 359 THEN '180-360天内' WHEN datediff(now(),_loc_first_time)>=360 THEN '360天以上' ELSE '未知' END property,count(DISTINCT mallcoo_id)COUNT,8 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property UNION ALL SELECT IF(_mobile_brand IS NULL OR trim(_mobile_brand)='','未知',_mobile_brand)property,count(DISTINCT mallcoo_id)COUNT,9 TYPE FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property;
        """
    }
    source {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "user",
    "uniqueid":"00004",
    "location": "all",
    "type": "source"
  },
  "model": "user_list_properties",
  "transform": {}
}
        """
      mql:
        """
SELECT property,count,type FROM(SELECT _workplace property,count(DISTINCT mallcoo_id)count,10 type FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND _workplace IS NOT NULL GROUP BY property UNION ALL SELECT _residence property,count(DISTINCT mallcoo_id)count,10 type FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00004')IS NOT NULL AND _residence IS NOT NULL GROUP BY property)z ORDER BY count desc;
        """
    }
    sourcecount {
      parameter:
        """
{
  "parameter": {
    "projectid": 14,
    "category": "user",
    "uniqueid": "80c27b3a22c24ecca87c9a0f1a28a19a",
    "type": "sourcecount",
    "lefttop": [ "35.4", "119.83" ],
    "rightbottom": [ "35.6", "118.22" ],
    "location": "all"
  },
  "model": "user_list_properties"
}
        """
      mql:
        """
SELECT sum(cnt)count FROM(SELECT count(DISTINCT mallcoo_id)cnt FROM medusa.kudu_user WHERE id BETWEEN '14-' AND '14-z' AND udf.has(_tag_temp,'80c27b3a22c24ecca87c9a0f1a28a19a')IS NOT NULL AND _workplace IS NOT NULL AND cast(split_part(_workplace, '_',1) as DOUBLE) BETWEEN 35.4 AND 35.6 AND cast(split_part(_workplace, '_',2) as DOUBLE) BETWEEN 118.22 AND 119.83 UNION ALL SELECT count(DISTINCT mallcoo_id)cnt FROM medusa.kudu_user WHERE id BETWEEN '14-' AND '14-z' AND udf.has(_tag_temp,'80c27b3a22c24ecca87c9a0f1a28a19a')IS NOT NULL AND _residence IS NOT NULL AND cast(split_part(_residence, '_',1) as DOUBLE) BETWEEN 35.4 AND 35.6 AND cast(split_part(_residence, '_',2) as DOUBLE) BETWEEN 118.22 AND 119.83)z;
        """
    }
    radiation {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "user",
    "uniqueid":"00004",
    "type": "radiation",
    "mall_lat": 39.139,
    "mall_lng": 117.187
  },
  "model": "user_list_properties",
  "transform": {}
}
        """
      mql:
        """SELECT ceil(getdistance(cast(split_part(_workplace,'_',1)as DOUBLE),cast(split_part(_workplace,'_',2)as DOUBLE),39.139,117.187))property,count(DISTINCT mallcoo_id)count FROM medusa.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND _workplace IS NOT NULL AND udf.has(_tag_temp,'00004')IS NOT NULL GROUP BY property;"""
    }
  }

  user_detail {
    info {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "user",
    "mallcoo_id":"uid_7140651",
    "type": "info"
  },
  "model": "user_detail",
  "transform": {}
}
        """
      mql:
        """
SELECT _mac,_uuid,_uid,_openid,_membercard_id,_membercard,_membercard_bonus,_mobile,_name,_id_card,_gender,_birthday,_province,_city,_area,_address,_hascar,_mobile_brand,_mobile_os,_loc_first_time,_portal_first_time,_app_first_time,_wechat_follow_time,_register_time,_register_source,_membercard_id IS NOT NULL AS _is_member,_plate_no,_tag FROM medusa.kudu_user WHERE id='10-uid_7140651' AND mallcoo_id=distinct_id;
        """
    }
    summary {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "user",
    "mallcoo_id":"uid_7140651",
    "type": "summary",
    "id_list": ["uid_7140651","uuid_46d5065dfa4c4b007d58790fbb944ca1","mobile_18622373399","uid_3191412","mac_18:af:61:3b:6a:18"],
    "time_range": [['2016-12-18','2017-06-15']]
  },
  "model": "user_detail",
  "transform": {}
}
        """
      mql:
        """
SELECT day,event_type,count(*)count FROM medusa.event2 WHERE event_type<>10001 AND(month BETWEEN to_date(trunc('2016-12-18','MM')) AND to_date(trunc('2017-06-15','MM')) AND day BETWEEN '2016-12-18' AND '2017-06-15')AND projectid='10' AND distinct_id IN('uid_7140651','uuid_46d5065dfa4c4b007d58790fbb944ca1','mobile_18622373399','uid_3191412','mac_18:af:61:3b:6a:18')GROUP BY event_type,day;
        """
    }
    detail {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "user",
    "mallcoo_id":"uid_7140651",
    "type": "detail",
    "id_list": ["uid_7140651","uuid_46d5065dfa4c4b007d58790fbb944ca1","mobile_18622373399","uid_3191412","mac_18:af:61:3b:6a:18"],
    "time_range": [['2016-12-18','2017-06-15']]
  },
  "model": "user_detail",
  "transform": {}
}
        """
      mql:
        """
SELECT * FROM medusa.event2 WHERE event_type<>10001 AND(month BETWEEN to_date(trunc('2016-12-18','MM')) AND to_date(trunc('2017-06-15','MM')) AND day BETWEEN '2016-12-18' AND '2017-06-15')AND projectid='10' AND distinct_id IN('uid_7140651','uuid_46d5065dfa4c4b007d58790fbb944ca1','mobile_18622373399','uid_3191412','mac_18:af:61:3b:6a:18')ORDER BY time;
        """
    }
  }

  tag_mark {
    user_list {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "shop",
    "uniqueid":"00005",
    "tag_value":"ABC",
    "type": "user_list"
  },
  "model": "tag_mark",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag=udf.put(x._tag,'ABC')FROM medusa_shop.kudu_user x,(SELECT mallcoo_id FROM medusa_shop.kudu_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag_temp,'00005')IS NOT NULL AND mallcoo_id=distinct_id)y WHERE x.mallcoo_id=y.mallcoo_id AND id BETWEEN '10-' AND '10-z';
SELECT count(*)count FROM medusa_shop.kudu_current_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag,'ABC')IS NOT NULL AND distinct_id=mallcoo_id;
        """
    }
    segment {
      parameter:
        """
{
  "parameter": {
    "user_filter": {
      "query": {
        "must": [
          {
            "code": "_mobile_brand",
            "operator": "equals",
            "values": [ "苹果" ]
          }
        ]
      }
    },
    "event_filters": [
      {
        "event_model": "consecutive",
        "time_range": [[ "2016-01-01","2016-12-31" ]],
        "measures": [
          {
            "event_type": 20001,
            "measure": "distinct",
            "field": "order_id",
            "alias": "order_id_distinct_20001",
            "group": true
          }
        ],
        "event_filter": {
          "Query": {
            "Must": [
              {
               "Query": {
                 "Must": [
                    {
                      "Code": "bonus",
                      "Operator": "hasvaluewithoutempty",
                      "Values": []
                    }
                 ]
               }
              },
              {
                "Code": "event_type",
                "Operator": "equals",
                "Values": [ 25001 ]
              }
            ]
           }
        },
        "timedimension": "day",
        "continue_time": 3,
        "is_extend": false,
        "is_any": false
      }
    ],
    "operator": "and",
    "projectid": 1,
    "category": "user",
    "top_event": {
      "time_range": [[ "2016-01-01","2016-12-31"]],
      "measures": [
        {
          "event_type": 25001,
          "measure": "sum",
          "field": "payment_amount",
          "alias": "payment_amount_sum_25001",
          "group": true
        },
        {
          "event_type": 25001,
          "measure": "day",
          "alias": "day_count_25001",
          "group": true
        }
      ],
      "event_filter": {
        "Query": {
          "Must": [
            {
              "Query": {
                "Must": [
                  {
                    "Code": "bonus",
                    "Operator": "hasvaluewithoutempty",
                    "Values": []
                  }
                ]
              }
            },
            {
              "Code": "event_type",
              "Operator": "equals",
              "Values": [ 25001 ]
            }
          ]
        }
      },
      "expressions": [
        {
          "expression": "payment_amount_sum_25001/day_count_25001",
          "alias": "customMeasure396",
          "format": "double"
        }
      ],
      "pages": {
          "direction": "desc",
          "size": 10,
          "start": 0
      },
      "is_extend": false,
      "is_any": false
    },
    "tag_value": "BCD",
    "type": "segment"
  },
  "model": "tag_mark"
}
        """
      mql:
        """
UPDATE IGNORE x SET x._tag=udf.put(x._tag,'BCD')FROM medusa.kudu_user x,(SELECT l.mallcoo_id mallcoo_id FROM(SELECT * FROM(SELECT *,_membercard_id IS NOT NULL AS _is_member FROM medusa.kudu_user)user_view WHERE id BETWEEN '1-' AND '1-z' AND projectid='1')l JOIN(SELECT m.mallcoo_id,COALESCE(sum(CASE WHEN event_type=25001 THEN payment_amount END),0) payment_amount_sum_25001,COALESCE(ndv(CASE WHEN event_type=25001 THEN day END),0) day_count_25001 FROM(SELECT * FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-12-31','MM')) AND day BETWEEN '2016-01-01' AND '2016-12-31')AND(event_type=25001 AND ((bonus IS NOT NULL AND trim(cast(bonus AS STRING))<>''))))m JOIN(select t1.mallcoo_id from (SELECT mallcoo_id FROM(SELECT mallcoo_id,date_sub(day,cn)dts,count(*)dcn FROM(SELECT s.*,ROW_NUMBER()OVER(PARTITION BY mallcoo_id ORDER BY day ASC)cn FROM(SELECT t.*,(order_id_distinct_20001-lag(order_id_distinct_20001,1,0)OVER(PARTITION BY mallcoo_id ORDER BY day))/lag(order_id_distinct_20001,1,0)OVER(PARTITION BY mallcoo_id ORDER BY day)ratio FROM(SELECT mallcoo_id,day day,COALESCE(count(distinct CASE WHEN event_type=20001 THEN order_id END),0) order_id_distinct_20001 FROM medusa.kudu_event WHERE id BETWEEN '1-' AND '1-z' AND projectid='1' AND(month BETWEEN to_date(trunc('2016-01-01','MM')) AND to_date(trunc('2016-12-31','MM')) AND day BETWEEN '2016-01-01' AND '2016-12-31')AND(event_type=25001 AND ((bonus IS NOT NULL AND trim(cast(bonus AS STRING))<>'')))AND(_mobile_brand='苹果')GROUP BY mallcoo_id,day)t)s)j GROUP BY mallcoo_id,dts)k GROUP BY mallcoo_id HAVING max(dcn)>=3) t1)n ON m.mallcoo_id =n.mallcoo_id GROUP BY mallcoo_id ORDER BY(udf.to_num(payment_amount_sum_25001/day_count_25001))desc LIMIT 10)z ON l.distinct_id=z.mallcoo_id)y WHERE x.mallcoo_id=y.mallcoo_id AND id BETWEEN '1-' AND '1-z';
SELECT count(*)count FROM medusa.kudu_user WHERE id BETWEEN '1-' AND '1-z' AND udf.has(_tag,'BCD')IS NOT NULL AND distinct_id=mallcoo_id;
        """
    }
    count {
      parameter:
        """
{
  "parameter": {
    "projectid": 10,
    "category" : "shop",
    "tag_value":"ABC",
    "type": "count"
  },
  "model": "tag_mark",
  "transform": {}
}
        """
      mql:
        """
SELECT count(*)count FROM medusa_shop.kudu_current_user WHERE id BETWEEN '10-' AND '10-z' AND udf.has(_tag,'ABC')IS NOT NULL AND distinct_id=mallcoo_id;
        """
    }
    remove {
      parameter:
        """
{
  "parameter": {
    "projectid": 1,
    "category" : "user",
    "tag_value":"BCD",
    "type": "remove"
  },
  "model": "tag_mark",
  "transform": {}
}
        """
      mql:
        """
UPDATE IGNORE medusa.kudu_user SET _tag=udf.remove(_tag,'BCD')WHERE udf.has(_tag,'BCD')IS NOT NULL AND id BETWEEN '1-' AND '1-z';
        """
    }
  }

  autocomplete: {
    自动补全 {
      parameter:
        """
{
  "parameter": {
    "projectid": 3,
    "fuzzy":"u",
    "pages": {
      "order": "property",
      "direction": "asc",
      "size": 10
    },
    "properties":[
      {
        "category" : "shop",
        "field":"_shop_name",
      },
      {
        "category" : "user",
        "field":"shopname",
      }
    ]
  },
  "model": "autocomplete",
  "transform": {}
}
        """
      mql:
        """
SELECT DISTINCT property FROM(SELECT property FROM medusa_shop.property WHERE id BETWEEN '3-_shop_name' AND '3-_shop_name.' AND instr(lower(property),'u')>0 UNION SELECT property FROM medusa_shop.property WHERE id BETWEEN '0-_shop_name' AND '0-_shop_name.' AND instr(lower(property),'u')>0 UNION ALL SELECT property FROM medusa.property WHERE id BETWEEN '3-shopname' AND '3-shopname.' AND instr(lower(property),'u')>0 UNION SELECT property FROM medusa.property WHERE id BETWEEN '0-shopname' AND '0-shopname.' AND instr(lower(property),'u')>0)s ORDER BY property asc LIMIT 10;
        """
    }
  }
}
